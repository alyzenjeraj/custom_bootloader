
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d28  08008198  08008198  00008198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08009ec0  08009ec0  00009ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ed8  08009ed8  0001000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009ed8  08009ed8  00009ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ee0  08009ee0  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ee0  08009ee0  00009ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ee4  08009ee4  00009ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009ee8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  08009ef4  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08009ef4  00010070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000078d0  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012f9  00000000  00000000  0001790c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  00018c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  00019218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014807  00000000  00000000  000197c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007484  00000000  00000000  0002dfc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000817f0  00000000  00000000  0003544b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b6c3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017c0  00000000  00000000  000b6c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008198 <__do_global_dtors_aux>:
 8008198:	b510      	push	{r4, lr}
 800819a:	4c05      	ldr	r4, [pc, #20]	; (80081b0 <__do_global_dtors_aux+0x18>)
 800819c:	7823      	ldrb	r3, [r4, #0]
 800819e:	b933      	cbnz	r3, 80081ae <__do_global_dtors_aux+0x16>
 80081a0:	4b04      	ldr	r3, [pc, #16]	; (80081b4 <__do_global_dtors_aux+0x1c>)
 80081a2:	b113      	cbz	r3, 80081aa <__do_global_dtors_aux+0x12>
 80081a4:	4804      	ldr	r0, [pc, #16]	; (80081b8 <__do_global_dtors_aux+0x20>)
 80081a6:	f3af 8000 	nop.w
 80081aa:	2301      	movs	r3, #1
 80081ac:	7023      	strb	r3, [r4, #0]
 80081ae:	bd10      	pop	{r4, pc}
 80081b0:	2000000c 	.word	0x2000000c
 80081b4:	00000000 	.word	0x00000000
 80081b8:	08009ea8 	.word	0x08009ea8

080081bc <frame_dummy>:
 80081bc:	b508      	push	{r3, lr}
 80081be:	4b03      	ldr	r3, [pc, #12]	; (80081cc <frame_dummy+0x10>)
 80081c0:	b11b      	cbz	r3, 80081ca <frame_dummy+0xe>
 80081c2:	4903      	ldr	r1, [pc, #12]	; (80081d0 <frame_dummy+0x14>)
 80081c4:	4803      	ldr	r0, [pc, #12]	; (80081d4 <frame_dummy+0x18>)
 80081c6:	f3af 8000 	nop.w
 80081ca:	bd08      	pop	{r3, pc}
 80081cc:	00000000 	.word	0x00000000
 80081d0:	20000010 	.word	0x20000010
 80081d4:	08009ea8 	.word	0x08009ea8

080081d8 <__aeabi_uldivmod>:
 80081d8:	b953      	cbnz	r3, 80081f0 <__aeabi_uldivmod+0x18>
 80081da:	b94a      	cbnz	r2, 80081f0 <__aeabi_uldivmod+0x18>
 80081dc:	2900      	cmp	r1, #0
 80081de:	bf08      	it	eq
 80081e0:	2800      	cmpeq	r0, #0
 80081e2:	bf1c      	itt	ne
 80081e4:	f04f 31ff 	movne.w	r1, #4294967295
 80081e8:	f04f 30ff 	movne.w	r0, #4294967295
 80081ec:	f000 b974 	b.w	80084d8 <__aeabi_idiv0>
 80081f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80081f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80081f8:	f000 f806 	bl	8008208 <__udivmoddi4>
 80081fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008204:	b004      	add	sp, #16
 8008206:	4770      	bx	lr

08008208 <__udivmoddi4>:
 8008208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800820c:	9d08      	ldr	r5, [sp, #32]
 800820e:	4604      	mov	r4, r0
 8008210:	468e      	mov	lr, r1
 8008212:	2b00      	cmp	r3, #0
 8008214:	d14d      	bne.n	80082b2 <__udivmoddi4+0xaa>
 8008216:	428a      	cmp	r2, r1
 8008218:	4694      	mov	ip, r2
 800821a:	d969      	bls.n	80082f0 <__udivmoddi4+0xe8>
 800821c:	fab2 f282 	clz	r2, r2
 8008220:	b152      	cbz	r2, 8008238 <__udivmoddi4+0x30>
 8008222:	fa01 f302 	lsl.w	r3, r1, r2
 8008226:	f1c2 0120 	rsb	r1, r2, #32
 800822a:	fa20 f101 	lsr.w	r1, r0, r1
 800822e:	fa0c fc02 	lsl.w	ip, ip, r2
 8008232:	ea41 0e03 	orr.w	lr, r1, r3
 8008236:	4094      	lsls	r4, r2
 8008238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800823c:	0c21      	lsrs	r1, r4, #16
 800823e:	fbbe f6f8 	udiv	r6, lr, r8
 8008242:	fa1f f78c 	uxth.w	r7, ip
 8008246:	fb08 e316 	mls	r3, r8, r6, lr
 800824a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800824e:	fb06 f107 	mul.w	r1, r6, r7
 8008252:	4299      	cmp	r1, r3
 8008254:	d90a      	bls.n	800826c <__udivmoddi4+0x64>
 8008256:	eb1c 0303 	adds.w	r3, ip, r3
 800825a:	f106 30ff 	add.w	r0, r6, #4294967295
 800825e:	f080 811f 	bcs.w	80084a0 <__udivmoddi4+0x298>
 8008262:	4299      	cmp	r1, r3
 8008264:	f240 811c 	bls.w	80084a0 <__udivmoddi4+0x298>
 8008268:	3e02      	subs	r6, #2
 800826a:	4463      	add	r3, ip
 800826c:	1a5b      	subs	r3, r3, r1
 800826e:	b2a4      	uxth	r4, r4
 8008270:	fbb3 f0f8 	udiv	r0, r3, r8
 8008274:	fb08 3310 	mls	r3, r8, r0, r3
 8008278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800827c:	fb00 f707 	mul.w	r7, r0, r7
 8008280:	42a7      	cmp	r7, r4
 8008282:	d90a      	bls.n	800829a <__udivmoddi4+0x92>
 8008284:	eb1c 0404 	adds.w	r4, ip, r4
 8008288:	f100 33ff 	add.w	r3, r0, #4294967295
 800828c:	f080 810a 	bcs.w	80084a4 <__udivmoddi4+0x29c>
 8008290:	42a7      	cmp	r7, r4
 8008292:	f240 8107 	bls.w	80084a4 <__udivmoddi4+0x29c>
 8008296:	4464      	add	r4, ip
 8008298:	3802      	subs	r0, #2
 800829a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800829e:	1be4      	subs	r4, r4, r7
 80082a0:	2600      	movs	r6, #0
 80082a2:	b11d      	cbz	r5, 80082ac <__udivmoddi4+0xa4>
 80082a4:	40d4      	lsrs	r4, r2
 80082a6:	2300      	movs	r3, #0
 80082a8:	e9c5 4300 	strd	r4, r3, [r5]
 80082ac:	4631      	mov	r1, r6
 80082ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b2:	428b      	cmp	r3, r1
 80082b4:	d909      	bls.n	80082ca <__udivmoddi4+0xc2>
 80082b6:	2d00      	cmp	r5, #0
 80082b8:	f000 80ef 	beq.w	800849a <__udivmoddi4+0x292>
 80082bc:	2600      	movs	r6, #0
 80082be:	e9c5 0100 	strd	r0, r1, [r5]
 80082c2:	4630      	mov	r0, r6
 80082c4:	4631      	mov	r1, r6
 80082c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ca:	fab3 f683 	clz	r6, r3
 80082ce:	2e00      	cmp	r6, #0
 80082d0:	d14a      	bne.n	8008368 <__udivmoddi4+0x160>
 80082d2:	428b      	cmp	r3, r1
 80082d4:	d302      	bcc.n	80082dc <__udivmoddi4+0xd4>
 80082d6:	4282      	cmp	r2, r0
 80082d8:	f200 80f9 	bhi.w	80084ce <__udivmoddi4+0x2c6>
 80082dc:	1a84      	subs	r4, r0, r2
 80082de:	eb61 0303 	sbc.w	r3, r1, r3
 80082e2:	2001      	movs	r0, #1
 80082e4:	469e      	mov	lr, r3
 80082e6:	2d00      	cmp	r5, #0
 80082e8:	d0e0      	beq.n	80082ac <__udivmoddi4+0xa4>
 80082ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80082ee:	e7dd      	b.n	80082ac <__udivmoddi4+0xa4>
 80082f0:	b902      	cbnz	r2, 80082f4 <__udivmoddi4+0xec>
 80082f2:	deff      	udf	#255	; 0xff
 80082f4:	fab2 f282 	clz	r2, r2
 80082f8:	2a00      	cmp	r2, #0
 80082fa:	f040 8092 	bne.w	8008422 <__udivmoddi4+0x21a>
 80082fe:	eba1 010c 	sub.w	r1, r1, ip
 8008302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008306:	fa1f fe8c 	uxth.w	lr, ip
 800830a:	2601      	movs	r6, #1
 800830c:	0c20      	lsrs	r0, r4, #16
 800830e:	fbb1 f3f7 	udiv	r3, r1, r7
 8008312:	fb07 1113 	mls	r1, r7, r3, r1
 8008316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800831a:	fb0e f003 	mul.w	r0, lr, r3
 800831e:	4288      	cmp	r0, r1
 8008320:	d908      	bls.n	8008334 <__udivmoddi4+0x12c>
 8008322:	eb1c 0101 	adds.w	r1, ip, r1
 8008326:	f103 38ff 	add.w	r8, r3, #4294967295
 800832a:	d202      	bcs.n	8008332 <__udivmoddi4+0x12a>
 800832c:	4288      	cmp	r0, r1
 800832e:	f200 80cb 	bhi.w	80084c8 <__udivmoddi4+0x2c0>
 8008332:	4643      	mov	r3, r8
 8008334:	1a09      	subs	r1, r1, r0
 8008336:	b2a4      	uxth	r4, r4
 8008338:	fbb1 f0f7 	udiv	r0, r1, r7
 800833c:	fb07 1110 	mls	r1, r7, r0, r1
 8008340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8008344:	fb0e fe00 	mul.w	lr, lr, r0
 8008348:	45a6      	cmp	lr, r4
 800834a:	d908      	bls.n	800835e <__udivmoddi4+0x156>
 800834c:	eb1c 0404 	adds.w	r4, ip, r4
 8008350:	f100 31ff 	add.w	r1, r0, #4294967295
 8008354:	d202      	bcs.n	800835c <__udivmoddi4+0x154>
 8008356:	45a6      	cmp	lr, r4
 8008358:	f200 80bb 	bhi.w	80084d2 <__udivmoddi4+0x2ca>
 800835c:	4608      	mov	r0, r1
 800835e:	eba4 040e 	sub.w	r4, r4, lr
 8008362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8008366:	e79c      	b.n	80082a2 <__udivmoddi4+0x9a>
 8008368:	f1c6 0720 	rsb	r7, r6, #32
 800836c:	40b3      	lsls	r3, r6
 800836e:	fa22 fc07 	lsr.w	ip, r2, r7
 8008372:	ea4c 0c03 	orr.w	ip, ip, r3
 8008376:	fa20 f407 	lsr.w	r4, r0, r7
 800837a:	fa01 f306 	lsl.w	r3, r1, r6
 800837e:	431c      	orrs	r4, r3
 8008380:	40f9      	lsrs	r1, r7
 8008382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8008386:	fa00 f306 	lsl.w	r3, r0, r6
 800838a:	fbb1 f8f9 	udiv	r8, r1, r9
 800838e:	0c20      	lsrs	r0, r4, #16
 8008390:	fa1f fe8c 	uxth.w	lr, ip
 8008394:	fb09 1118 	mls	r1, r9, r8, r1
 8008398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800839c:	fb08 f00e 	mul.w	r0, r8, lr
 80083a0:	4288      	cmp	r0, r1
 80083a2:	fa02 f206 	lsl.w	r2, r2, r6
 80083a6:	d90b      	bls.n	80083c0 <__udivmoddi4+0x1b8>
 80083a8:	eb1c 0101 	adds.w	r1, ip, r1
 80083ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80083b0:	f080 8088 	bcs.w	80084c4 <__udivmoddi4+0x2bc>
 80083b4:	4288      	cmp	r0, r1
 80083b6:	f240 8085 	bls.w	80084c4 <__udivmoddi4+0x2bc>
 80083ba:	f1a8 0802 	sub.w	r8, r8, #2
 80083be:	4461      	add	r1, ip
 80083c0:	1a09      	subs	r1, r1, r0
 80083c2:	b2a4      	uxth	r4, r4
 80083c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80083c8:	fb09 1110 	mls	r1, r9, r0, r1
 80083cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80083d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80083d4:	458e      	cmp	lr, r1
 80083d6:	d908      	bls.n	80083ea <__udivmoddi4+0x1e2>
 80083d8:	eb1c 0101 	adds.w	r1, ip, r1
 80083dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80083e0:	d26c      	bcs.n	80084bc <__udivmoddi4+0x2b4>
 80083e2:	458e      	cmp	lr, r1
 80083e4:	d96a      	bls.n	80084bc <__udivmoddi4+0x2b4>
 80083e6:	3802      	subs	r0, #2
 80083e8:	4461      	add	r1, ip
 80083ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80083ee:	fba0 9402 	umull	r9, r4, r0, r2
 80083f2:	eba1 010e 	sub.w	r1, r1, lr
 80083f6:	42a1      	cmp	r1, r4
 80083f8:	46c8      	mov	r8, r9
 80083fa:	46a6      	mov	lr, r4
 80083fc:	d356      	bcc.n	80084ac <__udivmoddi4+0x2a4>
 80083fe:	d053      	beq.n	80084a8 <__udivmoddi4+0x2a0>
 8008400:	b15d      	cbz	r5, 800841a <__udivmoddi4+0x212>
 8008402:	ebb3 0208 	subs.w	r2, r3, r8
 8008406:	eb61 010e 	sbc.w	r1, r1, lr
 800840a:	fa01 f707 	lsl.w	r7, r1, r7
 800840e:	fa22 f306 	lsr.w	r3, r2, r6
 8008412:	40f1      	lsrs	r1, r6
 8008414:	431f      	orrs	r7, r3
 8008416:	e9c5 7100 	strd	r7, r1, [r5]
 800841a:	2600      	movs	r6, #0
 800841c:	4631      	mov	r1, r6
 800841e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008422:	f1c2 0320 	rsb	r3, r2, #32
 8008426:	40d8      	lsrs	r0, r3
 8008428:	fa0c fc02 	lsl.w	ip, ip, r2
 800842c:	fa21 f303 	lsr.w	r3, r1, r3
 8008430:	4091      	lsls	r1, r2
 8008432:	4301      	orrs	r1, r0
 8008434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008438:	fa1f fe8c 	uxth.w	lr, ip
 800843c:	fbb3 f0f7 	udiv	r0, r3, r7
 8008440:	fb07 3610 	mls	r6, r7, r0, r3
 8008444:	0c0b      	lsrs	r3, r1, #16
 8008446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800844a:	fb00 f60e 	mul.w	r6, r0, lr
 800844e:	429e      	cmp	r6, r3
 8008450:	fa04 f402 	lsl.w	r4, r4, r2
 8008454:	d908      	bls.n	8008468 <__udivmoddi4+0x260>
 8008456:	eb1c 0303 	adds.w	r3, ip, r3
 800845a:	f100 38ff 	add.w	r8, r0, #4294967295
 800845e:	d22f      	bcs.n	80084c0 <__udivmoddi4+0x2b8>
 8008460:	429e      	cmp	r6, r3
 8008462:	d92d      	bls.n	80084c0 <__udivmoddi4+0x2b8>
 8008464:	3802      	subs	r0, #2
 8008466:	4463      	add	r3, ip
 8008468:	1b9b      	subs	r3, r3, r6
 800846a:	b289      	uxth	r1, r1
 800846c:	fbb3 f6f7 	udiv	r6, r3, r7
 8008470:	fb07 3316 	mls	r3, r7, r6, r3
 8008474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008478:	fb06 f30e 	mul.w	r3, r6, lr
 800847c:	428b      	cmp	r3, r1
 800847e:	d908      	bls.n	8008492 <__udivmoddi4+0x28a>
 8008480:	eb1c 0101 	adds.w	r1, ip, r1
 8008484:	f106 38ff 	add.w	r8, r6, #4294967295
 8008488:	d216      	bcs.n	80084b8 <__udivmoddi4+0x2b0>
 800848a:	428b      	cmp	r3, r1
 800848c:	d914      	bls.n	80084b8 <__udivmoddi4+0x2b0>
 800848e:	3e02      	subs	r6, #2
 8008490:	4461      	add	r1, ip
 8008492:	1ac9      	subs	r1, r1, r3
 8008494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8008498:	e738      	b.n	800830c <__udivmoddi4+0x104>
 800849a:	462e      	mov	r6, r5
 800849c:	4628      	mov	r0, r5
 800849e:	e705      	b.n	80082ac <__udivmoddi4+0xa4>
 80084a0:	4606      	mov	r6, r0
 80084a2:	e6e3      	b.n	800826c <__udivmoddi4+0x64>
 80084a4:	4618      	mov	r0, r3
 80084a6:	e6f8      	b.n	800829a <__udivmoddi4+0x92>
 80084a8:	454b      	cmp	r3, r9
 80084aa:	d2a9      	bcs.n	8008400 <__udivmoddi4+0x1f8>
 80084ac:	ebb9 0802 	subs.w	r8, r9, r2
 80084b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80084b4:	3801      	subs	r0, #1
 80084b6:	e7a3      	b.n	8008400 <__udivmoddi4+0x1f8>
 80084b8:	4646      	mov	r6, r8
 80084ba:	e7ea      	b.n	8008492 <__udivmoddi4+0x28a>
 80084bc:	4620      	mov	r0, r4
 80084be:	e794      	b.n	80083ea <__udivmoddi4+0x1e2>
 80084c0:	4640      	mov	r0, r8
 80084c2:	e7d1      	b.n	8008468 <__udivmoddi4+0x260>
 80084c4:	46d0      	mov	r8, sl
 80084c6:	e77b      	b.n	80083c0 <__udivmoddi4+0x1b8>
 80084c8:	3b02      	subs	r3, #2
 80084ca:	4461      	add	r1, ip
 80084cc:	e732      	b.n	8008334 <__udivmoddi4+0x12c>
 80084ce:	4630      	mov	r0, r6
 80084d0:	e709      	b.n	80082e6 <__udivmoddi4+0xde>
 80084d2:	4464      	add	r4, ip
 80084d4:	3802      	subs	r0, #2
 80084d6:	e742      	b.n	800835e <__udivmoddi4+0x156>

080084d8 <__aeabi_idiv0>:
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop

080084dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80084e0:	f000 f9fc 	bl	80088dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80084e4:	f000 f806 	bl	80084f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80084e8:	f000 f898 	bl	800861c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80084ec:	f000 f86c 	bl	80085c8 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80084f0:	e7fe      	b.n	80084f0 <main+0x14>
	...

080084f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b094      	sub	sp, #80	; 0x50
 80084f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80084fa:	f107 0320 	add.w	r3, r7, #32
 80084fe:	2230      	movs	r2, #48	; 0x30
 8008500:	2100      	movs	r1, #0
 8008502:	4618      	mov	r0, r3
 8008504:	f001 fcc8 	bl	8009e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008508:	f107 030c 	add.w	r3, r7, #12
 800850c:	2200      	movs	r2, #0
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	605a      	str	r2, [r3, #4]
 8008512:	609a      	str	r2, [r3, #8]
 8008514:	60da      	str	r2, [r3, #12]
 8008516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008518:	2300      	movs	r3, #0
 800851a:	60bb      	str	r3, [r7, #8]
 800851c:	4b28      	ldr	r3, [pc, #160]	; (80085c0 <SystemClock_Config+0xcc>)
 800851e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008520:	4a27      	ldr	r2, [pc, #156]	; (80085c0 <SystemClock_Config+0xcc>)
 8008522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008526:	6413      	str	r3, [r2, #64]	; 0x40
 8008528:	4b25      	ldr	r3, [pc, #148]	; (80085c0 <SystemClock_Config+0xcc>)
 800852a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008530:	60bb      	str	r3, [r7, #8]
 8008532:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008534:	2300      	movs	r3, #0
 8008536:	607b      	str	r3, [r7, #4]
 8008538:	4b22      	ldr	r3, [pc, #136]	; (80085c4 <SystemClock_Config+0xd0>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a21      	ldr	r2, [pc, #132]	; (80085c4 <SystemClock_Config+0xd0>)
 800853e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008542:	6013      	str	r3, [r2, #0]
 8008544:	4b1f      	ldr	r3, [pc, #124]	; (80085c4 <SystemClock_Config+0xd0>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800854c:	607b      	str	r3, [r7, #4]
 800854e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008550:	2302      	movs	r3, #2
 8008552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008554:	2301      	movs	r3, #1
 8008556:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008558:	2310      	movs	r3, #16
 800855a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800855c:	2302      	movs	r3, #2
 800855e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008560:	2300      	movs	r3, #0
 8008562:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8008564:	2310      	movs	r3, #16
 8008566:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8008568:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800856c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800856e:	2304      	movs	r3, #4
 8008570:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008572:	2304      	movs	r3, #4
 8008574:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008576:	f107 0320 	add.w	r3, r7, #32
 800857a:	4618      	mov	r0, r3
 800857c:	f000 fd0e 	bl	8008f9c <HAL_RCC_OscConfig>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8008586:	f000 f8bf 	bl	8008708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800858a:	230f      	movs	r3, #15
 800858c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800858e:	2302      	movs	r3, #2
 8008590:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008592:	2300      	movs	r3, #0
 8008594:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800859a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800859c:	2300      	movs	r3, #0
 800859e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80085a0:	f107 030c 	add.w	r3, r7, #12
 80085a4:	2102      	movs	r1, #2
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 ff70 	bl	800948c <HAL_RCC_ClockConfig>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80085b2:	f000 f8a9 	bl	8008708 <Error_Handler>
  }
}
 80085b6:	bf00      	nop
 80085b8:	3750      	adds	r7, #80	; 0x50
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	40023800 	.word	0x40023800
 80085c4:	40007000 	.word	0x40007000

080085c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80085cc:	4b11      	ldr	r3, [pc, #68]	; (8008614 <MX_USART2_UART_Init+0x4c>)
 80085ce:	4a12      	ldr	r2, [pc, #72]	; (8008618 <MX_USART2_UART_Init+0x50>)
 80085d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80085d2:	4b10      	ldr	r3, [pc, #64]	; (8008614 <MX_USART2_UART_Init+0x4c>)
 80085d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80085d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80085da:	4b0e      	ldr	r3, [pc, #56]	; (8008614 <MX_USART2_UART_Init+0x4c>)
 80085dc:	2200      	movs	r2, #0
 80085de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80085e0:	4b0c      	ldr	r3, [pc, #48]	; (8008614 <MX_USART2_UART_Init+0x4c>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80085e6:	4b0b      	ldr	r3, [pc, #44]	; (8008614 <MX_USART2_UART_Init+0x4c>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80085ec:	4b09      	ldr	r3, [pc, #36]	; (8008614 <MX_USART2_UART_Init+0x4c>)
 80085ee:	220c      	movs	r2, #12
 80085f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80085f2:	4b08      	ldr	r3, [pc, #32]	; (8008614 <MX_USART2_UART_Init+0x4c>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80085f8:	4b06      	ldr	r3, [pc, #24]	; (8008614 <MX_USART2_UART_Init+0x4c>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80085fe:	4805      	ldr	r0, [pc, #20]	; (8008614 <MX_USART2_UART_Init+0x4c>)
 8008600:	f001 f964 	bl	80098cc <HAL_UART_Init>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d001      	beq.n	800860e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800860a:	f000 f87d 	bl	8008708 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800860e:	bf00      	nop
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	20000028 	.word	0x20000028
 8008618:	40004400 	.word	0x40004400

0800861c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b08a      	sub	sp, #40	; 0x28
 8008620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008622:	f107 0314 	add.w	r3, r7, #20
 8008626:	2200      	movs	r2, #0
 8008628:	601a      	str	r2, [r3, #0]
 800862a:	605a      	str	r2, [r3, #4]
 800862c:	609a      	str	r2, [r3, #8]
 800862e:	60da      	str	r2, [r3, #12]
 8008630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008632:	2300      	movs	r3, #0
 8008634:	613b      	str	r3, [r7, #16]
 8008636:	4b31      	ldr	r3, [pc, #196]	; (80086fc <MX_GPIO_Init+0xe0>)
 8008638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863a:	4a30      	ldr	r2, [pc, #192]	; (80086fc <MX_GPIO_Init+0xe0>)
 800863c:	f043 0304 	orr.w	r3, r3, #4
 8008640:	6313      	str	r3, [r2, #48]	; 0x30
 8008642:	4b2e      	ldr	r3, [pc, #184]	; (80086fc <MX_GPIO_Init+0xe0>)
 8008644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008646:	f003 0304 	and.w	r3, r3, #4
 800864a:	613b      	str	r3, [r7, #16]
 800864c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800864e:	2300      	movs	r3, #0
 8008650:	60fb      	str	r3, [r7, #12]
 8008652:	4b2a      	ldr	r3, [pc, #168]	; (80086fc <MX_GPIO_Init+0xe0>)
 8008654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008656:	4a29      	ldr	r2, [pc, #164]	; (80086fc <MX_GPIO_Init+0xe0>)
 8008658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800865c:	6313      	str	r3, [r2, #48]	; 0x30
 800865e:	4b27      	ldr	r3, [pc, #156]	; (80086fc <MX_GPIO_Init+0xe0>)
 8008660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008666:	60fb      	str	r3, [r7, #12]
 8008668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800866a:	2300      	movs	r3, #0
 800866c:	60bb      	str	r3, [r7, #8]
 800866e:	4b23      	ldr	r3, [pc, #140]	; (80086fc <MX_GPIO_Init+0xe0>)
 8008670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008672:	4a22      	ldr	r2, [pc, #136]	; (80086fc <MX_GPIO_Init+0xe0>)
 8008674:	f043 0301 	orr.w	r3, r3, #1
 8008678:	6313      	str	r3, [r2, #48]	; 0x30
 800867a:	4b20      	ldr	r3, [pc, #128]	; (80086fc <MX_GPIO_Init+0xe0>)
 800867c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	60bb      	str	r3, [r7, #8]
 8008684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008686:	2300      	movs	r3, #0
 8008688:	607b      	str	r3, [r7, #4]
 800868a:	4b1c      	ldr	r3, [pc, #112]	; (80086fc <MX_GPIO_Init+0xe0>)
 800868c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868e:	4a1b      	ldr	r2, [pc, #108]	; (80086fc <MX_GPIO_Init+0xe0>)
 8008690:	f043 0302 	orr.w	r3, r3, #2
 8008694:	6313      	str	r3, [r2, #48]	; 0x30
 8008696:	4b19      	ldr	r3, [pc, #100]	; (80086fc <MX_GPIO_Init+0xe0>)
 8008698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869a:	f003 0302 	and.w	r3, r3, #2
 800869e:	607b      	str	r3, [r7, #4]
 80086a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80086a2:	2200      	movs	r2, #0
 80086a4:	2120      	movs	r1, #32
 80086a6:	4816      	ldr	r0, [pc, #88]	; (8008700 <MX_GPIO_Init+0xe4>)
 80086a8:	f000 fc20 	bl	8008eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80086ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80086b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80086b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086b8:	2300      	movs	r3, #0
 80086ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80086bc:	f107 0314 	add.w	r3, r7, #20
 80086c0:	4619      	mov	r1, r3
 80086c2:	4810      	ldr	r0, [pc, #64]	; (8008704 <MX_GPIO_Init+0xe8>)
 80086c4:	f000 fa8e 	bl	8008be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80086c8:	2320      	movs	r3, #32
 80086ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086cc:	2301      	movs	r3, #1
 80086ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086d0:	2300      	movs	r3, #0
 80086d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086d4:	2300      	movs	r3, #0
 80086d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80086d8:	f107 0314 	add.w	r3, r7, #20
 80086dc:	4619      	mov	r1, r3
 80086de:	4808      	ldr	r0, [pc, #32]	; (8008700 <MX_GPIO_Init+0xe4>)
 80086e0:	f000 fa80 	bl	8008be4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80086e4:	2200      	movs	r2, #0
 80086e6:	2100      	movs	r1, #0
 80086e8:	2028      	movs	r0, #40	; 0x28
 80086ea:	f000 fa44 	bl	8008b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80086ee:	2028      	movs	r0, #40	; 0x28
 80086f0:	f000 fa5d 	bl	8008bae <HAL_NVIC_EnableIRQ>

}
 80086f4:	bf00      	nop
 80086f6:	3728      	adds	r7, #40	; 0x28
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	40023800 	.word	0x40023800
 8008700:	40020000 	.word	0x40020000
 8008704:	40020800 	.word	0x40020800

08008708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008708:	b480      	push	{r7}
 800870a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800870c:	b672      	cpsid	i
}
 800870e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008710:	e7fe      	b.n	8008710 <Error_Handler+0x8>
	...

08008714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800871a:	2300      	movs	r3, #0
 800871c:	607b      	str	r3, [r7, #4]
 800871e:	4b10      	ldr	r3, [pc, #64]	; (8008760 <HAL_MspInit+0x4c>)
 8008720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008722:	4a0f      	ldr	r2, [pc, #60]	; (8008760 <HAL_MspInit+0x4c>)
 8008724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008728:	6453      	str	r3, [r2, #68]	; 0x44
 800872a:	4b0d      	ldr	r3, [pc, #52]	; (8008760 <HAL_MspInit+0x4c>)
 800872c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800872e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008732:	607b      	str	r3, [r7, #4]
 8008734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008736:	2300      	movs	r3, #0
 8008738:	603b      	str	r3, [r7, #0]
 800873a:	4b09      	ldr	r3, [pc, #36]	; (8008760 <HAL_MspInit+0x4c>)
 800873c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873e:	4a08      	ldr	r2, [pc, #32]	; (8008760 <HAL_MspInit+0x4c>)
 8008740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008744:	6413      	str	r3, [r2, #64]	; 0x40
 8008746:	4b06      	ldr	r3, [pc, #24]	; (8008760 <HAL_MspInit+0x4c>)
 8008748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800874e:	603b      	str	r3, [r7, #0]
 8008750:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8008752:	2007      	movs	r0, #7
 8008754:	f000 fa04 	bl	8008b60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008758:	bf00      	nop
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	40023800 	.word	0x40023800

08008764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b08a      	sub	sp, #40	; 0x28
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800876c:	f107 0314 	add.w	r3, r7, #20
 8008770:	2200      	movs	r2, #0
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	605a      	str	r2, [r3, #4]
 8008776:	609a      	str	r2, [r3, #8]
 8008778:	60da      	str	r2, [r3, #12]
 800877a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a19      	ldr	r2, [pc, #100]	; (80087e8 <HAL_UART_MspInit+0x84>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d12b      	bne.n	80087de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008786:	2300      	movs	r3, #0
 8008788:	613b      	str	r3, [r7, #16]
 800878a:	4b18      	ldr	r3, [pc, #96]	; (80087ec <HAL_UART_MspInit+0x88>)
 800878c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878e:	4a17      	ldr	r2, [pc, #92]	; (80087ec <HAL_UART_MspInit+0x88>)
 8008790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008794:	6413      	str	r3, [r2, #64]	; 0x40
 8008796:	4b15      	ldr	r3, [pc, #84]	; (80087ec <HAL_UART_MspInit+0x88>)
 8008798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800879e:	613b      	str	r3, [r7, #16]
 80087a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087a2:	2300      	movs	r3, #0
 80087a4:	60fb      	str	r3, [r7, #12]
 80087a6:	4b11      	ldr	r3, [pc, #68]	; (80087ec <HAL_UART_MspInit+0x88>)
 80087a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087aa:	4a10      	ldr	r2, [pc, #64]	; (80087ec <HAL_UART_MspInit+0x88>)
 80087ac:	f043 0301 	orr.w	r3, r3, #1
 80087b0:	6313      	str	r3, [r2, #48]	; 0x30
 80087b2:	4b0e      	ldr	r3, [pc, #56]	; (80087ec <HAL_UART_MspInit+0x88>)
 80087b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	60fb      	str	r3, [r7, #12]
 80087bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80087be:	230c      	movs	r3, #12
 80087c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087c2:	2302      	movs	r3, #2
 80087c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087c6:	2300      	movs	r3, #0
 80087c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087ca:	2303      	movs	r3, #3
 80087cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80087ce:	2307      	movs	r3, #7
 80087d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087d2:	f107 0314 	add.w	r3, r7, #20
 80087d6:	4619      	mov	r1, r3
 80087d8:	4805      	ldr	r0, [pc, #20]	; (80087f0 <HAL_UART_MspInit+0x8c>)
 80087da:	f000 fa03 	bl	8008be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80087de:	bf00      	nop
 80087e0:	3728      	adds	r7, #40	; 0x28
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	40004400 	.word	0x40004400
 80087ec:	40023800 	.word	0x40023800
 80087f0:	40020000 	.word	0x40020000

080087f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80087f4:	b480      	push	{r7}
 80087f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80087f8:	e7fe      	b.n	80087f8 <NMI_Handler+0x4>

080087fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80087fa:	b480      	push	{r7}
 80087fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80087fe:	e7fe      	b.n	80087fe <HardFault_Handler+0x4>

08008800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008800:	b480      	push	{r7}
 8008802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008804:	e7fe      	b.n	8008804 <MemManage_Handler+0x4>

08008806 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008806:	b480      	push	{r7}
 8008808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800880a:	e7fe      	b.n	800880a <BusFault_Handler+0x4>

0800880c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800880c:	b480      	push	{r7}
 800880e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008810:	e7fe      	b.n	8008810 <UsageFault_Handler+0x4>

08008812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008812:	b480      	push	{r7}
 8008814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008816:	bf00      	nop
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008820:	b480      	push	{r7}
 8008822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008824:	bf00      	nop
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr

0800882e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800882e:	b480      	push	{r7}
 8008830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008832:	bf00      	nop
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008840:	f000 f89e 	bl	8008980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008844:	bf00      	nop
 8008846:	bd80      	pop	{r7, pc}

08008848 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800884c:	2120      	movs	r1, #32
 800884e:	4804      	ldr	r0, [pc, #16]	; (8008860 <EXTI15_10_IRQHandler+0x18>)
 8008850:	f000 fb65 	bl	8008f1e <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8008854:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008858:	f000 fb7c 	bl	8008f54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800885c:	bf00      	nop
 800885e:	bd80      	pop	{r7, pc}
 8008860:	40020000 	.word	0x40020000

08008864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008864:	b480      	push	{r7}
 8008866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008868:	4b06      	ldr	r3, [pc, #24]	; (8008884 <SystemInit+0x20>)
 800886a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800886e:	4a05      	ldr	r2, [pc, #20]	; (8008884 <SystemInit+0x20>)
 8008870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008878:	bf00      	nop
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	e000ed00 	.word	0xe000ed00

08008888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80088c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800888c:	480d      	ldr	r0, [pc, #52]	; (80088c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800888e:	490e      	ldr	r1, [pc, #56]	; (80088c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008890:	4a0e      	ldr	r2, [pc, #56]	; (80088cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008894:	e002      	b.n	800889c <LoopCopyDataInit>

08008896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800889a:	3304      	adds	r3, #4

0800889c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800889c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800889e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80088a0:	d3f9      	bcc.n	8008896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80088a2:	4a0b      	ldr	r2, [pc, #44]	; (80088d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80088a4:	4c0b      	ldr	r4, [pc, #44]	; (80088d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80088a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80088a8:	e001      	b.n	80088ae <LoopFillZerobss>

080088aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80088aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80088ac:	3204      	adds	r2, #4

080088ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80088ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80088b0:	d3fb      	bcc.n	80088aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80088b2:	f7ff ffd7 	bl	8008864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80088b6:	f001 facb 	bl	8009e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80088ba:	f7ff fe0f 	bl	80084dc <main>
  bx  lr    
 80088be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80088c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80088c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80088c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80088cc:	08009ee8 	.word	0x08009ee8
  ldr r2, =_sbss
 80088d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80088d4:	20000070 	.word	0x20000070

080088d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80088d8:	e7fe      	b.n	80088d8 <ADC_IRQHandler>
	...

080088dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80088e0:	4b0e      	ldr	r3, [pc, #56]	; (800891c <HAL_Init+0x40>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a0d      	ldr	r2, [pc, #52]	; (800891c <HAL_Init+0x40>)
 80088e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80088ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80088ec:	4b0b      	ldr	r3, [pc, #44]	; (800891c <HAL_Init+0x40>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a0a      	ldr	r2, [pc, #40]	; (800891c <HAL_Init+0x40>)
 80088f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80088f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80088f8:	4b08      	ldr	r3, [pc, #32]	; (800891c <HAL_Init+0x40>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a07      	ldr	r2, [pc, #28]	; (800891c <HAL_Init+0x40>)
 80088fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008902:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008904:	2003      	movs	r0, #3
 8008906:	f000 f92b 	bl	8008b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800890a:	2000      	movs	r0, #0
 800890c:	f000 f808 	bl	8008920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008910:	f7ff ff00 	bl	8008714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	40023c00 	.word	0x40023c00

08008920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008928:	4b12      	ldr	r3, [pc, #72]	; (8008974 <HAL_InitTick+0x54>)
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	4b12      	ldr	r3, [pc, #72]	; (8008978 <HAL_InitTick+0x58>)
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	4619      	mov	r1, r3
 8008932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008936:	fbb3 f3f1 	udiv	r3, r3, r1
 800893a:	fbb2 f3f3 	udiv	r3, r2, r3
 800893e:	4618      	mov	r0, r3
 8008940:	f000 f943 	bl	8008bca <HAL_SYSTICK_Config>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e00e      	b.n	800896c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2b0f      	cmp	r3, #15
 8008952:	d80a      	bhi.n	800896a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008954:	2200      	movs	r2, #0
 8008956:	6879      	ldr	r1, [r7, #4]
 8008958:	f04f 30ff 	mov.w	r0, #4294967295
 800895c:	f000 f90b 	bl	8008b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008960:	4a06      	ldr	r2, [pc, #24]	; (800897c <HAL_InitTick+0x5c>)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008966:	2300      	movs	r3, #0
 8008968:	e000      	b.n	800896c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
}
 800896c:	4618      	mov	r0, r3
 800896e:	3708      	adds	r7, #8
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	20000000 	.word	0x20000000
 8008978:	20000008 	.word	0x20000008
 800897c:	20000004 	.word	0x20000004

08008980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008980:	b480      	push	{r7}
 8008982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008984:	4b06      	ldr	r3, [pc, #24]	; (80089a0 <HAL_IncTick+0x20>)
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	461a      	mov	r2, r3
 800898a:	4b06      	ldr	r3, [pc, #24]	; (80089a4 <HAL_IncTick+0x24>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4413      	add	r3, r2
 8008990:	4a04      	ldr	r2, [pc, #16]	; (80089a4 <HAL_IncTick+0x24>)
 8008992:	6013      	str	r3, [r2, #0]
}
 8008994:	bf00      	nop
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	20000008 	.word	0x20000008
 80089a4:	2000006c 	.word	0x2000006c

080089a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80089a8:	b480      	push	{r7}
 80089aa:	af00      	add	r7, sp, #0
  return uwTick;
 80089ac:	4b03      	ldr	r3, [pc, #12]	; (80089bc <HAL_GetTick+0x14>)
 80089ae:	681b      	ldr	r3, [r3, #0]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	2000006c 	.word	0x2000006c

080089c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f003 0307 	and.w	r3, r3, #7
 80089ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80089d0:	4b0c      	ldr	r3, [pc, #48]	; (8008a04 <__NVIC_SetPriorityGrouping+0x44>)
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80089d6:	68ba      	ldr	r2, [r7, #8]
 80089d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80089dc:	4013      	ands	r3, r2
 80089de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80089e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80089ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80089f2:	4a04      	ldr	r2, [pc, #16]	; (8008a04 <__NVIC_SetPriorityGrouping+0x44>)
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	60d3      	str	r3, [r2, #12]
}
 80089f8:	bf00      	nop
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	e000ed00 	.word	0xe000ed00

08008a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a0c:	4b04      	ldr	r3, [pc, #16]	; (8008a20 <__NVIC_GetPriorityGrouping+0x18>)
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	0a1b      	lsrs	r3, r3, #8
 8008a12:	f003 0307 	and.w	r3, r3, #7
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr
 8008a20:	e000ed00 	.word	0xe000ed00

08008a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	db0b      	blt.n	8008a4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008a36:	79fb      	ldrb	r3, [r7, #7]
 8008a38:	f003 021f 	and.w	r2, r3, #31
 8008a3c:	4907      	ldr	r1, [pc, #28]	; (8008a5c <__NVIC_EnableIRQ+0x38>)
 8008a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a42:	095b      	lsrs	r3, r3, #5
 8008a44:	2001      	movs	r0, #1
 8008a46:	fa00 f202 	lsl.w	r2, r0, r2
 8008a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008a4e:	bf00      	nop
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	e000e100 	.word	0xe000e100

08008a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	6039      	str	r1, [r7, #0]
 8008a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	db0a      	blt.n	8008a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	490c      	ldr	r1, [pc, #48]	; (8008aac <__NVIC_SetPriority+0x4c>)
 8008a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a7e:	0112      	lsls	r2, r2, #4
 8008a80:	b2d2      	uxtb	r2, r2
 8008a82:	440b      	add	r3, r1
 8008a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008a88:	e00a      	b.n	8008aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	4908      	ldr	r1, [pc, #32]	; (8008ab0 <__NVIC_SetPriority+0x50>)
 8008a90:	79fb      	ldrb	r3, [r7, #7]
 8008a92:	f003 030f 	and.w	r3, r3, #15
 8008a96:	3b04      	subs	r3, #4
 8008a98:	0112      	lsls	r2, r2, #4
 8008a9a:	b2d2      	uxtb	r2, r2
 8008a9c:	440b      	add	r3, r1
 8008a9e:	761a      	strb	r2, [r3, #24]
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	e000e100 	.word	0xe000e100
 8008ab0:	e000ed00 	.word	0xe000ed00

08008ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b089      	sub	sp, #36	; 0x24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f003 0307 	and.w	r3, r3, #7
 8008ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	f1c3 0307 	rsb	r3, r3, #7
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	bf28      	it	cs
 8008ad2:	2304      	movcs	r3, #4
 8008ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	3304      	adds	r3, #4
 8008ada:	2b06      	cmp	r3, #6
 8008adc:	d902      	bls.n	8008ae4 <NVIC_EncodePriority+0x30>
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	3b03      	subs	r3, #3
 8008ae2:	e000      	b.n	8008ae6 <NVIC_EncodePriority+0x32>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	fa02 f303 	lsl.w	r3, r2, r3
 8008af2:	43da      	mvns	r2, r3
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	401a      	ands	r2, r3
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008afc:	f04f 31ff 	mov.w	r1, #4294967295
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	fa01 f303 	lsl.w	r3, r1, r3
 8008b06:	43d9      	mvns	r1, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b0c:	4313      	orrs	r3, r2
         );
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3724      	adds	r7, #36	; 0x24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
	...

08008b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	3b01      	subs	r3, #1
 8008b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b2c:	d301      	bcc.n	8008b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e00f      	b.n	8008b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b32:	4a0a      	ldr	r2, [pc, #40]	; (8008b5c <SysTick_Config+0x40>)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	3b01      	subs	r3, #1
 8008b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008b3a:	210f      	movs	r1, #15
 8008b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b40:	f7ff ff8e 	bl	8008a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b44:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <SysTick_Config+0x40>)
 8008b46:	2200      	movs	r2, #0
 8008b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b4a:	4b04      	ldr	r3, [pc, #16]	; (8008b5c <SysTick_Config+0x40>)
 8008b4c:	2207      	movs	r2, #7
 8008b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	e000e010 	.word	0xe000e010

08008b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f7ff ff29 	bl	80089c0 <__NVIC_SetPriorityGrouping>
}
 8008b6e:	bf00      	nop
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b086      	sub	sp, #24
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	60b9      	str	r1, [r7, #8]
 8008b80:	607a      	str	r2, [r7, #4]
 8008b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008b84:	2300      	movs	r3, #0
 8008b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008b88:	f7ff ff3e 	bl	8008a08 <__NVIC_GetPriorityGrouping>
 8008b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	68b9      	ldr	r1, [r7, #8]
 8008b92:	6978      	ldr	r0, [r7, #20]
 8008b94:	f7ff ff8e 	bl	8008ab4 <NVIC_EncodePriority>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b9e:	4611      	mov	r1, r2
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7ff ff5d 	bl	8008a60 <__NVIC_SetPriority>
}
 8008ba6:	bf00      	nop
 8008ba8:	3718      	adds	r7, #24
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b082      	sub	sp, #8
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff ff31 	bl	8008a24 <__NVIC_EnableIRQ>
}
 8008bc2:	bf00      	nop
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b082      	sub	sp, #8
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7ff ffa2 	bl	8008b1c <SysTick_Config>
 8008bd8:	4603      	mov	r3, r0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
	...

08008be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b089      	sub	sp, #36	; 0x24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	61fb      	str	r3, [r7, #28]
 8008bfe:	e159      	b.n	8008eb4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008c00:	2201      	movs	r2, #1
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	fa02 f303 	lsl.w	r3, r2, r3
 8008c08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	697a      	ldr	r2, [r7, #20]
 8008c10:	4013      	ands	r3, r2
 8008c12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008c14:	693a      	ldr	r2, [r7, #16]
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	f040 8148 	bne.w	8008eae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f003 0303 	and.w	r3, r3, #3
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d005      	beq.n	8008c36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d130      	bne.n	8008c98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	005b      	lsls	r3, r3, #1
 8008c40:	2203      	movs	r2, #3
 8008c42:	fa02 f303 	lsl.w	r3, r2, r3
 8008c46:	43db      	mvns	r3, r3
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	68da      	ldr	r2, [r3, #12]
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	005b      	lsls	r3, r3, #1
 8008c56:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5a:	69ba      	ldr	r2, [r7, #24]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	69ba      	ldr	r2, [r7, #24]
 8008c64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	fa02 f303 	lsl.w	r3, r2, r3
 8008c74:	43db      	mvns	r3, r3
 8008c76:	69ba      	ldr	r2, [r7, #24]
 8008c78:	4013      	ands	r3, r2
 8008c7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	091b      	lsrs	r3, r3, #4
 8008c82:	f003 0201 	and.w	r2, r3, #1
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	69ba      	ldr	r2, [r7, #24]
 8008c96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	f003 0303 	and.w	r3, r3, #3
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d017      	beq.n	8008cd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	005b      	lsls	r3, r3, #1
 8008cae:	2203      	movs	r2, #3
 8008cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb4:	43db      	mvns	r3, r3
 8008cb6:	69ba      	ldr	r2, [r7, #24]
 8008cb8:	4013      	ands	r3, r2
 8008cba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	689a      	ldr	r2, [r3, #8]
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	005b      	lsls	r3, r3, #1
 8008cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc8:	69ba      	ldr	r2, [r7, #24]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	69ba      	ldr	r2, [r7, #24]
 8008cd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	f003 0303 	and.w	r3, r3, #3
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d123      	bne.n	8008d28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	08da      	lsrs	r2, r3, #3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	3208      	adds	r2, #8
 8008ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	f003 0307 	and.w	r3, r3, #7
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	220f      	movs	r2, #15
 8008cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cfc:	43db      	mvns	r3, r3
 8008cfe:	69ba      	ldr	r2, [r7, #24]
 8008d00:	4013      	ands	r3, r2
 8008d02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	691a      	ldr	r2, [r3, #16]
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	f003 0307 	and.w	r3, r3, #7
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	fa02 f303 	lsl.w	r3, r2, r3
 8008d14:	69ba      	ldr	r2, [r7, #24]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	08da      	lsrs	r2, r3, #3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	3208      	adds	r2, #8
 8008d22:	69b9      	ldr	r1, [r7, #24]
 8008d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	2203      	movs	r2, #3
 8008d34:	fa02 f303 	lsl.w	r3, r2, r3
 8008d38:	43db      	mvns	r3, r3
 8008d3a:	69ba      	ldr	r2, [r7, #24]
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	f003 0203 	and.w	r2, r3, #3
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	005b      	lsls	r3, r3, #1
 8008d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d50:	69ba      	ldr	r2, [r7, #24]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	69ba      	ldr	r2, [r7, #24]
 8008d5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 80a2 	beq.w	8008eae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	60fb      	str	r3, [r7, #12]
 8008d6e:	4b57      	ldr	r3, [pc, #348]	; (8008ecc <HAL_GPIO_Init+0x2e8>)
 8008d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d72:	4a56      	ldr	r2, [pc, #344]	; (8008ecc <HAL_GPIO_Init+0x2e8>)
 8008d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d78:	6453      	str	r3, [r2, #68]	; 0x44
 8008d7a:	4b54      	ldr	r3, [pc, #336]	; (8008ecc <HAL_GPIO_Init+0x2e8>)
 8008d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d86:	4a52      	ldr	r2, [pc, #328]	; (8008ed0 <HAL_GPIO_Init+0x2ec>)
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	089b      	lsrs	r3, r3, #2
 8008d8c:	3302      	adds	r3, #2
 8008d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	f003 0303 	and.w	r3, r3, #3
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	220f      	movs	r2, #15
 8008d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008da2:	43db      	mvns	r3, r3
 8008da4:	69ba      	ldr	r2, [r7, #24]
 8008da6:	4013      	ands	r3, r2
 8008da8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a49      	ldr	r2, [pc, #292]	; (8008ed4 <HAL_GPIO_Init+0x2f0>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d019      	beq.n	8008de6 <HAL_GPIO_Init+0x202>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a48      	ldr	r2, [pc, #288]	; (8008ed8 <HAL_GPIO_Init+0x2f4>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d013      	beq.n	8008de2 <HAL_GPIO_Init+0x1fe>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a47      	ldr	r2, [pc, #284]	; (8008edc <HAL_GPIO_Init+0x2f8>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d00d      	beq.n	8008dde <HAL_GPIO_Init+0x1fa>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a46      	ldr	r2, [pc, #280]	; (8008ee0 <HAL_GPIO_Init+0x2fc>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d007      	beq.n	8008dda <HAL_GPIO_Init+0x1f6>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a45      	ldr	r2, [pc, #276]	; (8008ee4 <HAL_GPIO_Init+0x300>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d101      	bne.n	8008dd6 <HAL_GPIO_Init+0x1f2>
 8008dd2:	2304      	movs	r3, #4
 8008dd4:	e008      	b.n	8008de8 <HAL_GPIO_Init+0x204>
 8008dd6:	2307      	movs	r3, #7
 8008dd8:	e006      	b.n	8008de8 <HAL_GPIO_Init+0x204>
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e004      	b.n	8008de8 <HAL_GPIO_Init+0x204>
 8008dde:	2302      	movs	r3, #2
 8008de0:	e002      	b.n	8008de8 <HAL_GPIO_Init+0x204>
 8008de2:	2301      	movs	r3, #1
 8008de4:	e000      	b.n	8008de8 <HAL_GPIO_Init+0x204>
 8008de6:	2300      	movs	r3, #0
 8008de8:	69fa      	ldr	r2, [r7, #28]
 8008dea:	f002 0203 	and.w	r2, r2, #3
 8008dee:	0092      	lsls	r2, r2, #2
 8008df0:	4093      	lsls	r3, r2
 8008df2:	69ba      	ldr	r2, [r7, #24]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008df8:	4935      	ldr	r1, [pc, #212]	; (8008ed0 <HAL_GPIO_Init+0x2ec>)
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	089b      	lsrs	r3, r3, #2
 8008dfe:	3302      	adds	r3, #2
 8008e00:	69ba      	ldr	r2, [r7, #24]
 8008e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008e06:	4b38      	ldr	r3, [pc, #224]	; (8008ee8 <HAL_GPIO_Init+0x304>)
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	43db      	mvns	r3, r3
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	4013      	ands	r3, r2
 8008e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d003      	beq.n	8008e2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008e22:	69ba      	ldr	r2, [r7, #24]
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008e2a:	4a2f      	ldr	r2, [pc, #188]	; (8008ee8 <HAL_GPIO_Init+0x304>)
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008e30:	4b2d      	ldr	r3, [pc, #180]	; (8008ee8 <HAL_GPIO_Init+0x304>)
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	43db      	mvns	r3, r3
 8008e3a:	69ba      	ldr	r2, [r7, #24]
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d003      	beq.n	8008e54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008e4c:	69ba      	ldr	r2, [r7, #24]
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008e54:	4a24      	ldr	r2, [pc, #144]	; (8008ee8 <HAL_GPIO_Init+0x304>)
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008e5a:	4b23      	ldr	r3, [pc, #140]	; (8008ee8 <HAL_GPIO_Init+0x304>)
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	43db      	mvns	r3, r3
 8008e64:	69ba      	ldr	r2, [r7, #24]
 8008e66:	4013      	ands	r3, r2
 8008e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d003      	beq.n	8008e7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008e76:	69ba      	ldr	r2, [r7, #24]
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008e7e:	4a1a      	ldr	r2, [pc, #104]	; (8008ee8 <HAL_GPIO_Init+0x304>)
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008e84:	4b18      	ldr	r3, [pc, #96]	; (8008ee8 <HAL_GPIO_Init+0x304>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	43db      	mvns	r3, r3
 8008e8e:	69ba      	ldr	r2, [r7, #24]
 8008e90:	4013      	ands	r3, r2
 8008e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d003      	beq.n	8008ea8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008ea0:	69ba      	ldr	r2, [r7, #24]
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008ea8:	4a0f      	ldr	r2, [pc, #60]	; (8008ee8 <HAL_GPIO_Init+0x304>)
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	61fb      	str	r3, [r7, #28]
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	2b0f      	cmp	r3, #15
 8008eb8:	f67f aea2 	bls.w	8008c00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008ebc:	bf00      	nop
 8008ebe:	bf00      	nop
 8008ec0:	3724      	adds	r7, #36	; 0x24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	40023800 	.word	0x40023800
 8008ed0:	40013800 	.word	0x40013800
 8008ed4:	40020000 	.word	0x40020000
 8008ed8:	40020400 	.word	0x40020400
 8008edc:	40020800 	.word	0x40020800
 8008ee0:	40020c00 	.word	0x40020c00
 8008ee4:	40021000 	.word	0x40021000
 8008ee8:	40013c00 	.word	0x40013c00

08008eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	807b      	strh	r3, [r7, #2]
 8008ef8:	4613      	mov	r3, r2
 8008efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008efc:	787b      	ldrb	r3, [r7, #1]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d003      	beq.n	8008f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f02:	887a      	ldrh	r2, [r7, #2]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008f08:	e003      	b.n	8008f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008f0a:	887b      	ldrh	r3, [r7, #2]
 8008f0c:	041a      	lsls	r2, r3, #16
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	619a      	str	r2, [r3, #24]
}
 8008f12:	bf00      	nop
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b085      	sub	sp, #20
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	460b      	mov	r3, r1
 8008f28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008f30:	887a      	ldrh	r2, [r7, #2]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	4013      	ands	r3, r2
 8008f36:	041a      	lsls	r2, r3, #16
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	43d9      	mvns	r1, r3
 8008f3c:	887b      	ldrh	r3, [r7, #2]
 8008f3e:	400b      	ands	r3, r1
 8008f40:	431a      	orrs	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	619a      	str	r2, [r3, #24]
}
 8008f46:	bf00      	nop
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
	...

08008f54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008f5e:	4b08      	ldr	r3, [pc, #32]	; (8008f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f60:	695a      	ldr	r2, [r3, #20]
 8008f62:	88fb      	ldrh	r3, [r7, #6]
 8008f64:	4013      	ands	r3, r2
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d006      	beq.n	8008f78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008f6a:	4a05      	ldr	r2, [pc, #20]	; (8008f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f6c:	88fb      	ldrh	r3, [r7, #6]
 8008f6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008f70:	88fb      	ldrh	r3, [r7, #6]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 f806 	bl	8008f84 <HAL_GPIO_EXTI_Callback>
  }
}
 8008f78:	bf00      	nop
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	40013c00 	.word	0x40013c00

08008f84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008f8e:	bf00      	nop
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
	...

08008f9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b086      	sub	sp, #24
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d101      	bne.n	8008fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e267      	b.n	800947e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d075      	beq.n	80090a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008fba:	4b88      	ldr	r3, [pc, #544]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	f003 030c 	and.w	r3, r3, #12
 8008fc2:	2b04      	cmp	r3, #4
 8008fc4:	d00c      	beq.n	8008fe0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008fc6:	4b85      	ldr	r3, [pc, #532]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008fce:	2b08      	cmp	r3, #8
 8008fd0:	d112      	bne.n	8008ff8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008fd2:	4b82      	ldr	r3, [pc, #520]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fde:	d10b      	bne.n	8008ff8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fe0:	4b7e      	ldr	r3, [pc, #504]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d05b      	beq.n	80090a4 <HAL_RCC_OscConfig+0x108>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d157      	bne.n	80090a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e242      	b.n	800947e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009000:	d106      	bne.n	8009010 <HAL_RCC_OscConfig+0x74>
 8009002:	4b76      	ldr	r3, [pc, #472]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a75      	ldr	r2, [pc, #468]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 8009008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800900c:	6013      	str	r3, [r2, #0]
 800900e:	e01d      	b.n	800904c <HAL_RCC_OscConfig+0xb0>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009018:	d10c      	bne.n	8009034 <HAL_RCC_OscConfig+0x98>
 800901a:	4b70      	ldr	r3, [pc, #448]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a6f      	ldr	r2, [pc, #444]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 8009020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009024:	6013      	str	r3, [r2, #0]
 8009026:	4b6d      	ldr	r3, [pc, #436]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a6c      	ldr	r2, [pc, #432]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 800902c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009030:	6013      	str	r3, [r2, #0]
 8009032:	e00b      	b.n	800904c <HAL_RCC_OscConfig+0xb0>
 8009034:	4b69      	ldr	r3, [pc, #420]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a68      	ldr	r2, [pc, #416]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 800903a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800903e:	6013      	str	r3, [r2, #0]
 8009040:	4b66      	ldr	r3, [pc, #408]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a65      	ldr	r2, [pc, #404]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 8009046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800904a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d013      	beq.n	800907c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009054:	f7ff fca8 	bl	80089a8 <HAL_GetTick>
 8009058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800905a:	e008      	b.n	800906e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800905c:	f7ff fca4 	bl	80089a8 <HAL_GetTick>
 8009060:	4602      	mov	r2, r0
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	2b64      	cmp	r3, #100	; 0x64
 8009068:	d901      	bls.n	800906e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	e207      	b.n	800947e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800906e:	4b5b      	ldr	r3, [pc, #364]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009076:	2b00      	cmp	r3, #0
 8009078:	d0f0      	beq.n	800905c <HAL_RCC_OscConfig+0xc0>
 800907a:	e014      	b.n	80090a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800907c:	f7ff fc94 	bl	80089a8 <HAL_GetTick>
 8009080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009082:	e008      	b.n	8009096 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009084:	f7ff fc90 	bl	80089a8 <HAL_GetTick>
 8009088:	4602      	mov	r2, r0
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	2b64      	cmp	r3, #100	; 0x64
 8009090:	d901      	bls.n	8009096 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009092:	2303      	movs	r3, #3
 8009094:	e1f3      	b.n	800947e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009096:	4b51      	ldr	r3, [pc, #324]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1f0      	bne.n	8009084 <HAL_RCC_OscConfig+0xe8>
 80090a2:	e000      	b.n	80090a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 0302 	and.w	r3, r3, #2
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d063      	beq.n	800917a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80090b2:	4b4a      	ldr	r3, [pc, #296]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	f003 030c 	and.w	r3, r3, #12
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00b      	beq.n	80090d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090be:	4b47      	ldr	r3, [pc, #284]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80090c6:	2b08      	cmp	r3, #8
 80090c8:	d11c      	bne.n	8009104 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090ca:	4b44      	ldr	r3, [pc, #272]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d116      	bne.n	8009104 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090d6:	4b41      	ldr	r3, [pc, #260]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 0302 	and.w	r3, r3, #2
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d005      	beq.n	80090ee <HAL_RCC_OscConfig+0x152>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d001      	beq.n	80090ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e1c7      	b.n	800947e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090ee:	4b3b      	ldr	r3, [pc, #236]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	00db      	lsls	r3, r3, #3
 80090fc:	4937      	ldr	r1, [pc, #220]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 80090fe:	4313      	orrs	r3, r2
 8009100:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009102:	e03a      	b.n	800917a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d020      	beq.n	800914e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800910c:	4b34      	ldr	r3, [pc, #208]	; (80091e0 <HAL_RCC_OscConfig+0x244>)
 800910e:	2201      	movs	r2, #1
 8009110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009112:	f7ff fc49 	bl	80089a8 <HAL_GetTick>
 8009116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009118:	e008      	b.n	800912c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800911a:	f7ff fc45 	bl	80089a8 <HAL_GetTick>
 800911e:	4602      	mov	r2, r0
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	1ad3      	subs	r3, r2, r3
 8009124:	2b02      	cmp	r3, #2
 8009126:	d901      	bls.n	800912c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009128:	2303      	movs	r3, #3
 800912a:	e1a8      	b.n	800947e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800912c:	4b2b      	ldr	r3, [pc, #172]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f003 0302 	and.w	r3, r3, #2
 8009134:	2b00      	cmp	r3, #0
 8009136:	d0f0      	beq.n	800911a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009138:	4b28      	ldr	r3, [pc, #160]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	00db      	lsls	r3, r3, #3
 8009146:	4925      	ldr	r1, [pc, #148]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 8009148:	4313      	orrs	r3, r2
 800914a:	600b      	str	r3, [r1, #0]
 800914c:	e015      	b.n	800917a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800914e:	4b24      	ldr	r3, [pc, #144]	; (80091e0 <HAL_RCC_OscConfig+0x244>)
 8009150:	2200      	movs	r2, #0
 8009152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009154:	f7ff fc28 	bl	80089a8 <HAL_GetTick>
 8009158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800915a:	e008      	b.n	800916e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800915c:	f7ff fc24 	bl	80089a8 <HAL_GetTick>
 8009160:	4602      	mov	r2, r0
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	1ad3      	subs	r3, r2, r3
 8009166:	2b02      	cmp	r3, #2
 8009168:	d901      	bls.n	800916e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800916a:	2303      	movs	r3, #3
 800916c:	e187      	b.n	800947e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800916e:	4b1b      	ldr	r3, [pc, #108]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1f0      	bne.n	800915c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 0308 	and.w	r3, r3, #8
 8009182:	2b00      	cmp	r3, #0
 8009184:	d036      	beq.n	80091f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	695b      	ldr	r3, [r3, #20]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d016      	beq.n	80091bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800918e:	4b15      	ldr	r3, [pc, #84]	; (80091e4 <HAL_RCC_OscConfig+0x248>)
 8009190:	2201      	movs	r2, #1
 8009192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009194:	f7ff fc08 	bl	80089a8 <HAL_GetTick>
 8009198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800919a:	e008      	b.n	80091ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800919c:	f7ff fc04 	bl	80089a8 <HAL_GetTick>
 80091a0:	4602      	mov	r2, r0
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d901      	bls.n	80091ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80091aa:	2303      	movs	r3, #3
 80091ac:	e167      	b.n	800947e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091ae:	4b0b      	ldr	r3, [pc, #44]	; (80091dc <HAL_RCC_OscConfig+0x240>)
 80091b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091b2:	f003 0302 	and.w	r3, r3, #2
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d0f0      	beq.n	800919c <HAL_RCC_OscConfig+0x200>
 80091ba:	e01b      	b.n	80091f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091bc:	4b09      	ldr	r3, [pc, #36]	; (80091e4 <HAL_RCC_OscConfig+0x248>)
 80091be:	2200      	movs	r2, #0
 80091c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091c2:	f7ff fbf1 	bl	80089a8 <HAL_GetTick>
 80091c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091c8:	e00e      	b.n	80091e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091ca:	f7ff fbed 	bl	80089a8 <HAL_GetTick>
 80091ce:	4602      	mov	r2, r0
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d907      	bls.n	80091e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80091d8:	2303      	movs	r3, #3
 80091da:	e150      	b.n	800947e <HAL_RCC_OscConfig+0x4e2>
 80091dc:	40023800 	.word	0x40023800
 80091e0:	42470000 	.word	0x42470000
 80091e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091e8:	4b88      	ldr	r3, [pc, #544]	; (800940c <HAL_RCC_OscConfig+0x470>)
 80091ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091ec:	f003 0302 	and.w	r3, r3, #2
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1ea      	bne.n	80091ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 0304 	and.w	r3, r3, #4
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 8097 	beq.w	8009330 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009202:	2300      	movs	r3, #0
 8009204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009206:	4b81      	ldr	r3, [pc, #516]	; (800940c <HAL_RCC_OscConfig+0x470>)
 8009208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d10f      	bne.n	8009232 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009212:	2300      	movs	r3, #0
 8009214:	60bb      	str	r3, [r7, #8]
 8009216:	4b7d      	ldr	r3, [pc, #500]	; (800940c <HAL_RCC_OscConfig+0x470>)
 8009218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921a:	4a7c      	ldr	r2, [pc, #496]	; (800940c <HAL_RCC_OscConfig+0x470>)
 800921c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009220:	6413      	str	r3, [r2, #64]	; 0x40
 8009222:	4b7a      	ldr	r3, [pc, #488]	; (800940c <HAL_RCC_OscConfig+0x470>)
 8009224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800922a:	60bb      	str	r3, [r7, #8]
 800922c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800922e:	2301      	movs	r3, #1
 8009230:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009232:	4b77      	ldr	r3, [pc, #476]	; (8009410 <HAL_RCC_OscConfig+0x474>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800923a:	2b00      	cmp	r3, #0
 800923c:	d118      	bne.n	8009270 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800923e:	4b74      	ldr	r3, [pc, #464]	; (8009410 <HAL_RCC_OscConfig+0x474>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a73      	ldr	r2, [pc, #460]	; (8009410 <HAL_RCC_OscConfig+0x474>)
 8009244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800924a:	f7ff fbad 	bl	80089a8 <HAL_GetTick>
 800924e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009250:	e008      	b.n	8009264 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009252:	f7ff fba9 	bl	80089a8 <HAL_GetTick>
 8009256:	4602      	mov	r2, r0
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	2b02      	cmp	r3, #2
 800925e:	d901      	bls.n	8009264 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009260:	2303      	movs	r3, #3
 8009262:	e10c      	b.n	800947e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009264:	4b6a      	ldr	r3, [pc, #424]	; (8009410 <HAL_RCC_OscConfig+0x474>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800926c:	2b00      	cmp	r3, #0
 800926e:	d0f0      	beq.n	8009252 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d106      	bne.n	8009286 <HAL_RCC_OscConfig+0x2ea>
 8009278:	4b64      	ldr	r3, [pc, #400]	; (800940c <HAL_RCC_OscConfig+0x470>)
 800927a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800927c:	4a63      	ldr	r2, [pc, #396]	; (800940c <HAL_RCC_OscConfig+0x470>)
 800927e:	f043 0301 	orr.w	r3, r3, #1
 8009282:	6713      	str	r3, [r2, #112]	; 0x70
 8009284:	e01c      	b.n	80092c0 <HAL_RCC_OscConfig+0x324>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	2b05      	cmp	r3, #5
 800928c:	d10c      	bne.n	80092a8 <HAL_RCC_OscConfig+0x30c>
 800928e:	4b5f      	ldr	r3, [pc, #380]	; (800940c <HAL_RCC_OscConfig+0x470>)
 8009290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009292:	4a5e      	ldr	r2, [pc, #376]	; (800940c <HAL_RCC_OscConfig+0x470>)
 8009294:	f043 0304 	orr.w	r3, r3, #4
 8009298:	6713      	str	r3, [r2, #112]	; 0x70
 800929a:	4b5c      	ldr	r3, [pc, #368]	; (800940c <HAL_RCC_OscConfig+0x470>)
 800929c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929e:	4a5b      	ldr	r2, [pc, #364]	; (800940c <HAL_RCC_OscConfig+0x470>)
 80092a0:	f043 0301 	orr.w	r3, r3, #1
 80092a4:	6713      	str	r3, [r2, #112]	; 0x70
 80092a6:	e00b      	b.n	80092c0 <HAL_RCC_OscConfig+0x324>
 80092a8:	4b58      	ldr	r3, [pc, #352]	; (800940c <HAL_RCC_OscConfig+0x470>)
 80092aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ac:	4a57      	ldr	r2, [pc, #348]	; (800940c <HAL_RCC_OscConfig+0x470>)
 80092ae:	f023 0301 	bic.w	r3, r3, #1
 80092b2:	6713      	str	r3, [r2, #112]	; 0x70
 80092b4:	4b55      	ldr	r3, [pc, #340]	; (800940c <HAL_RCC_OscConfig+0x470>)
 80092b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092b8:	4a54      	ldr	r2, [pc, #336]	; (800940c <HAL_RCC_OscConfig+0x470>)
 80092ba:	f023 0304 	bic.w	r3, r3, #4
 80092be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d015      	beq.n	80092f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092c8:	f7ff fb6e 	bl	80089a8 <HAL_GetTick>
 80092cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092ce:	e00a      	b.n	80092e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092d0:	f7ff fb6a 	bl	80089a8 <HAL_GetTick>
 80092d4:	4602      	mov	r2, r0
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	1ad3      	subs	r3, r2, r3
 80092da:	f241 3288 	movw	r2, #5000	; 0x1388
 80092de:	4293      	cmp	r3, r2
 80092e0:	d901      	bls.n	80092e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80092e2:	2303      	movs	r3, #3
 80092e4:	e0cb      	b.n	800947e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092e6:	4b49      	ldr	r3, [pc, #292]	; (800940c <HAL_RCC_OscConfig+0x470>)
 80092e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ea:	f003 0302 	and.w	r3, r3, #2
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d0ee      	beq.n	80092d0 <HAL_RCC_OscConfig+0x334>
 80092f2:	e014      	b.n	800931e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80092f4:	f7ff fb58 	bl	80089a8 <HAL_GetTick>
 80092f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092fa:	e00a      	b.n	8009312 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092fc:	f7ff fb54 	bl	80089a8 <HAL_GetTick>
 8009300:	4602      	mov	r2, r0
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	f241 3288 	movw	r2, #5000	; 0x1388
 800930a:	4293      	cmp	r3, r2
 800930c:	d901      	bls.n	8009312 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800930e:	2303      	movs	r3, #3
 8009310:	e0b5      	b.n	800947e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009312:	4b3e      	ldr	r3, [pc, #248]	; (800940c <HAL_RCC_OscConfig+0x470>)
 8009314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009316:	f003 0302 	and.w	r3, r3, #2
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1ee      	bne.n	80092fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800931e:	7dfb      	ldrb	r3, [r7, #23]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d105      	bne.n	8009330 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009324:	4b39      	ldr	r3, [pc, #228]	; (800940c <HAL_RCC_OscConfig+0x470>)
 8009326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009328:	4a38      	ldr	r2, [pc, #224]	; (800940c <HAL_RCC_OscConfig+0x470>)
 800932a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800932e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	699b      	ldr	r3, [r3, #24]
 8009334:	2b00      	cmp	r3, #0
 8009336:	f000 80a1 	beq.w	800947c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800933a:	4b34      	ldr	r3, [pc, #208]	; (800940c <HAL_RCC_OscConfig+0x470>)
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	f003 030c 	and.w	r3, r3, #12
 8009342:	2b08      	cmp	r3, #8
 8009344:	d05c      	beq.n	8009400 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	699b      	ldr	r3, [r3, #24]
 800934a:	2b02      	cmp	r3, #2
 800934c:	d141      	bne.n	80093d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800934e:	4b31      	ldr	r3, [pc, #196]	; (8009414 <HAL_RCC_OscConfig+0x478>)
 8009350:	2200      	movs	r2, #0
 8009352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009354:	f7ff fb28 	bl	80089a8 <HAL_GetTick>
 8009358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800935a:	e008      	b.n	800936e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800935c:	f7ff fb24 	bl	80089a8 <HAL_GetTick>
 8009360:	4602      	mov	r2, r0
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	1ad3      	subs	r3, r2, r3
 8009366:	2b02      	cmp	r3, #2
 8009368:	d901      	bls.n	800936e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	e087      	b.n	800947e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800936e:	4b27      	ldr	r3, [pc, #156]	; (800940c <HAL_RCC_OscConfig+0x470>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1f0      	bne.n	800935c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	69da      	ldr	r2, [r3, #28]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a1b      	ldr	r3, [r3, #32]
 8009382:	431a      	orrs	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009388:	019b      	lsls	r3, r3, #6
 800938a:	431a      	orrs	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009390:	085b      	lsrs	r3, r3, #1
 8009392:	3b01      	subs	r3, #1
 8009394:	041b      	lsls	r3, r3, #16
 8009396:	431a      	orrs	r2, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939c:	061b      	lsls	r3, r3, #24
 800939e:	491b      	ldr	r1, [pc, #108]	; (800940c <HAL_RCC_OscConfig+0x470>)
 80093a0:	4313      	orrs	r3, r2
 80093a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093a4:	4b1b      	ldr	r3, [pc, #108]	; (8009414 <HAL_RCC_OscConfig+0x478>)
 80093a6:	2201      	movs	r2, #1
 80093a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093aa:	f7ff fafd 	bl	80089a8 <HAL_GetTick>
 80093ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093b0:	e008      	b.n	80093c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093b2:	f7ff faf9 	bl	80089a8 <HAL_GetTick>
 80093b6:	4602      	mov	r2, r0
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	2b02      	cmp	r3, #2
 80093be:	d901      	bls.n	80093c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80093c0:	2303      	movs	r3, #3
 80093c2:	e05c      	b.n	800947e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093c4:	4b11      	ldr	r3, [pc, #68]	; (800940c <HAL_RCC_OscConfig+0x470>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d0f0      	beq.n	80093b2 <HAL_RCC_OscConfig+0x416>
 80093d0:	e054      	b.n	800947c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093d2:	4b10      	ldr	r3, [pc, #64]	; (8009414 <HAL_RCC_OscConfig+0x478>)
 80093d4:	2200      	movs	r2, #0
 80093d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093d8:	f7ff fae6 	bl	80089a8 <HAL_GetTick>
 80093dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093de:	e008      	b.n	80093f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093e0:	f7ff fae2 	bl	80089a8 <HAL_GetTick>
 80093e4:	4602      	mov	r2, r0
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d901      	bls.n	80093f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80093ee:	2303      	movs	r3, #3
 80093f0:	e045      	b.n	800947e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093f2:	4b06      	ldr	r3, [pc, #24]	; (800940c <HAL_RCC_OscConfig+0x470>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d1f0      	bne.n	80093e0 <HAL_RCC_OscConfig+0x444>
 80093fe:	e03d      	b.n	800947c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d107      	bne.n	8009418 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	e038      	b.n	800947e <HAL_RCC_OscConfig+0x4e2>
 800940c:	40023800 	.word	0x40023800
 8009410:	40007000 	.word	0x40007000
 8009414:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009418:	4b1b      	ldr	r3, [pc, #108]	; (8009488 <HAL_RCC_OscConfig+0x4ec>)
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	2b01      	cmp	r3, #1
 8009424:	d028      	beq.n	8009478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009430:	429a      	cmp	r2, r3
 8009432:	d121      	bne.n	8009478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800943e:	429a      	cmp	r2, r3
 8009440:	d11a      	bne.n	8009478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009448:	4013      	ands	r3, r2
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800944e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009450:	4293      	cmp	r3, r2
 8009452:	d111      	bne.n	8009478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800945e:	085b      	lsrs	r3, r3, #1
 8009460:	3b01      	subs	r3, #1
 8009462:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009464:	429a      	cmp	r2, r3
 8009466:	d107      	bne.n	8009478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009472:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009474:	429a      	cmp	r2, r3
 8009476:	d001      	beq.n	800947c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	e000      	b.n	800947e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3718      	adds	r7, #24
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	40023800 	.word	0x40023800

0800948c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d101      	bne.n	80094a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	e0cc      	b.n	800963a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80094a0:	4b68      	ldr	r3, [pc, #416]	; (8009644 <HAL_RCC_ClockConfig+0x1b8>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 0307 	and.w	r3, r3, #7
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d90c      	bls.n	80094c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094ae:	4b65      	ldr	r3, [pc, #404]	; (8009644 <HAL_RCC_ClockConfig+0x1b8>)
 80094b0:	683a      	ldr	r2, [r7, #0]
 80094b2:	b2d2      	uxtb	r2, r2
 80094b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80094b6:	4b63      	ldr	r3, [pc, #396]	; (8009644 <HAL_RCC_ClockConfig+0x1b8>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 0307 	and.w	r3, r3, #7
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d001      	beq.n	80094c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e0b8      	b.n	800963a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 0302 	and.w	r3, r3, #2
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d020      	beq.n	8009516 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 0304 	and.w	r3, r3, #4
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d005      	beq.n	80094ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80094e0:	4b59      	ldr	r3, [pc, #356]	; (8009648 <HAL_RCC_ClockConfig+0x1bc>)
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	4a58      	ldr	r2, [pc, #352]	; (8009648 <HAL_RCC_ClockConfig+0x1bc>)
 80094e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80094ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 0308 	and.w	r3, r3, #8
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d005      	beq.n	8009504 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80094f8:	4b53      	ldr	r3, [pc, #332]	; (8009648 <HAL_RCC_ClockConfig+0x1bc>)
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	4a52      	ldr	r2, [pc, #328]	; (8009648 <HAL_RCC_ClockConfig+0x1bc>)
 80094fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009502:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009504:	4b50      	ldr	r3, [pc, #320]	; (8009648 <HAL_RCC_ClockConfig+0x1bc>)
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	494d      	ldr	r1, [pc, #308]	; (8009648 <HAL_RCC_ClockConfig+0x1bc>)
 8009512:	4313      	orrs	r3, r2
 8009514:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	2b00      	cmp	r3, #0
 8009520:	d044      	beq.n	80095ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d107      	bne.n	800953a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800952a:	4b47      	ldr	r3, [pc, #284]	; (8009648 <HAL_RCC_ClockConfig+0x1bc>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009532:	2b00      	cmp	r3, #0
 8009534:	d119      	bne.n	800956a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	e07f      	b.n	800963a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	2b02      	cmp	r3, #2
 8009540:	d003      	beq.n	800954a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009546:	2b03      	cmp	r3, #3
 8009548:	d107      	bne.n	800955a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800954a:	4b3f      	ldr	r3, [pc, #252]	; (8009648 <HAL_RCC_ClockConfig+0x1bc>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d109      	bne.n	800956a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	e06f      	b.n	800963a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800955a:	4b3b      	ldr	r3, [pc, #236]	; (8009648 <HAL_RCC_ClockConfig+0x1bc>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0302 	and.w	r3, r3, #2
 8009562:	2b00      	cmp	r3, #0
 8009564:	d101      	bne.n	800956a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	e067      	b.n	800963a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800956a:	4b37      	ldr	r3, [pc, #220]	; (8009648 <HAL_RCC_ClockConfig+0x1bc>)
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	f023 0203 	bic.w	r2, r3, #3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	4934      	ldr	r1, [pc, #208]	; (8009648 <HAL_RCC_ClockConfig+0x1bc>)
 8009578:	4313      	orrs	r3, r2
 800957a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800957c:	f7ff fa14 	bl	80089a8 <HAL_GetTick>
 8009580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009582:	e00a      	b.n	800959a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009584:	f7ff fa10 	bl	80089a8 <HAL_GetTick>
 8009588:	4602      	mov	r2, r0
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009592:	4293      	cmp	r3, r2
 8009594:	d901      	bls.n	800959a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009596:	2303      	movs	r3, #3
 8009598:	e04f      	b.n	800963a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800959a:	4b2b      	ldr	r3, [pc, #172]	; (8009648 <HAL_RCC_ClockConfig+0x1bc>)
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	f003 020c 	and.w	r2, r3, #12
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d1eb      	bne.n	8009584 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80095ac:	4b25      	ldr	r3, [pc, #148]	; (8009644 <HAL_RCC_ClockConfig+0x1b8>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 0307 	and.w	r3, r3, #7
 80095b4:	683a      	ldr	r2, [r7, #0]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d20c      	bcs.n	80095d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095ba:	4b22      	ldr	r3, [pc, #136]	; (8009644 <HAL_RCC_ClockConfig+0x1b8>)
 80095bc:	683a      	ldr	r2, [r7, #0]
 80095be:	b2d2      	uxtb	r2, r2
 80095c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095c2:	4b20      	ldr	r3, [pc, #128]	; (8009644 <HAL_RCC_ClockConfig+0x1b8>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 0307 	and.w	r3, r3, #7
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d001      	beq.n	80095d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e032      	b.n	800963a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 0304 	and.w	r3, r3, #4
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d008      	beq.n	80095f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80095e0:	4b19      	ldr	r3, [pc, #100]	; (8009648 <HAL_RCC_ClockConfig+0x1bc>)
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	4916      	ldr	r1, [pc, #88]	; (8009648 <HAL_RCC_ClockConfig+0x1bc>)
 80095ee:	4313      	orrs	r3, r2
 80095f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f003 0308 	and.w	r3, r3, #8
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d009      	beq.n	8009612 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80095fe:	4b12      	ldr	r3, [pc, #72]	; (8009648 <HAL_RCC_ClockConfig+0x1bc>)
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	00db      	lsls	r3, r3, #3
 800960c:	490e      	ldr	r1, [pc, #56]	; (8009648 <HAL_RCC_ClockConfig+0x1bc>)
 800960e:	4313      	orrs	r3, r2
 8009610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009612:	f000 f821 	bl	8009658 <HAL_RCC_GetSysClockFreq>
 8009616:	4602      	mov	r2, r0
 8009618:	4b0b      	ldr	r3, [pc, #44]	; (8009648 <HAL_RCC_ClockConfig+0x1bc>)
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	091b      	lsrs	r3, r3, #4
 800961e:	f003 030f 	and.w	r3, r3, #15
 8009622:	490a      	ldr	r1, [pc, #40]	; (800964c <HAL_RCC_ClockConfig+0x1c0>)
 8009624:	5ccb      	ldrb	r3, [r1, r3]
 8009626:	fa22 f303 	lsr.w	r3, r2, r3
 800962a:	4a09      	ldr	r2, [pc, #36]	; (8009650 <HAL_RCC_ClockConfig+0x1c4>)
 800962c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800962e:	4b09      	ldr	r3, [pc, #36]	; (8009654 <HAL_RCC_ClockConfig+0x1c8>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4618      	mov	r0, r3
 8009634:	f7ff f974 	bl	8008920 <HAL_InitTick>

  return HAL_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	40023c00 	.word	0x40023c00
 8009648:	40023800 	.word	0x40023800
 800964c:	08009ec0 	.word	0x08009ec0
 8009650:	20000000 	.word	0x20000000
 8009654:	20000004 	.word	0x20000004

08009658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800965c:	b094      	sub	sp, #80	; 0x50
 800965e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009660:	2300      	movs	r3, #0
 8009662:	647b      	str	r3, [r7, #68]	; 0x44
 8009664:	2300      	movs	r3, #0
 8009666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009668:	2300      	movs	r3, #0
 800966a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800966c:	2300      	movs	r3, #0
 800966e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009670:	4b79      	ldr	r3, [pc, #484]	; (8009858 <HAL_RCC_GetSysClockFreq+0x200>)
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	f003 030c 	and.w	r3, r3, #12
 8009678:	2b08      	cmp	r3, #8
 800967a:	d00d      	beq.n	8009698 <HAL_RCC_GetSysClockFreq+0x40>
 800967c:	2b08      	cmp	r3, #8
 800967e:	f200 80e1 	bhi.w	8009844 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009682:	2b00      	cmp	r3, #0
 8009684:	d002      	beq.n	800968c <HAL_RCC_GetSysClockFreq+0x34>
 8009686:	2b04      	cmp	r3, #4
 8009688:	d003      	beq.n	8009692 <HAL_RCC_GetSysClockFreq+0x3a>
 800968a:	e0db      	b.n	8009844 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800968c:	4b73      	ldr	r3, [pc, #460]	; (800985c <HAL_RCC_GetSysClockFreq+0x204>)
 800968e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009690:	e0db      	b.n	800984a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009692:	4b73      	ldr	r3, [pc, #460]	; (8009860 <HAL_RCC_GetSysClockFreq+0x208>)
 8009694:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009696:	e0d8      	b.n	800984a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009698:	4b6f      	ldr	r3, [pc, #444]	; (8009858 <HAL_RCC_GetSysClockFreq+0x200>)
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80096a2:	4b6d      	ldr	r3, [pc, #436]	; (8009858 <HAL_RCC_GetSysClockFreq+0x200>)
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d063      	beq.n	8009776 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096ae:	4b6a      	ldr	r3, [pc, #424]	; (8009858 <HAL_RCC_GetSysClockFreq+0x200>)
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	099b      	lsrs	r3, r3, #6
 80096b4:	2200      	movs	r2, #0
 80096b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80096b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80096ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096c0:	633b      	str	r3, [r7, #48]	; 0x30
 80096c2:	2300      	movs	r3, #0
 80096c4:	637b      	str	r3, [r7, #52]	; 0x34
 80096c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80096ca:	4622      	mov	r2, r4
 80096cc:	462b      	mov	r3, r5
 80096ce:	f04f 0000 	mov.w	r0, #0
 80096d2:	f04f 0100 	mov.w	r1, #0
 80096d6:	0159      	lsls	r1, r3, #5
 80096d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80096dc:	0150      	lsls	r0, r2, #5
 80096de:	4602      	mov	r2, r0
 80096e0:	460b      	mov	r3, r1
 80096e2:	4621      	mov	r1, r4
 80096e4:	1a51      	subs	r1, r2, r1
 80096e6:	6139      	str	r1, [r7, #16]
 80096e8:	4629      	mov	r1, r5
 80096ea:	eb63 0301 	sbc.w	r3, r3, r1
 80096ee:	617b      	str	r3, [r7, #20]
 80096f0:	f04f 0200 	mov.w	r2, #0
 80096f4:	f04f 0300 	mov.w	r3, #0
 80096f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80096fc:	4659      	mov	r1, fp
 80096fe:	018b      	lsls	r3, r1, #6
 8009700:	4651      	mov	r1, sl
 8009702:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009706:	4651      	mov	r1, sl
 8009708:	018a      	lsls	r2, r1, #6
 800970a:	4651      	mov	r1, sl
 800970c:	ebb2 0801 	subs.w	r8, r2, r1
 8009710:	4659      	mov	r1, fp
 8009712:	eb63 0901 	sbc.w	r9, r3, r1
 8009716:	f04f 0200 	mov.w	r2, #0
 800971a:	f04f 0300 	mov.w	r3, #0
 800971e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009722:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009726:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800972a:	4690      	mov	r8, r2
 800972c:	4699      	mov	r9, r3
 800972e:	4623      	mov	r3, r4
 8009730:	eb18 0303 	adds.w	r3, r8, r3
 8009734:	60bb      	str	r3, [r7, #8]
 8009736:	462b      	mov	r3, r5
 8009738:	eb49 0303 	adc.w	r3, r9, r3
 800973c:	60fb      	str	r3, [r7, #12]
 800973e:	f04f 0200 	mov.w	r2, #0
 8009742:	f04f 0300 	mov.w	r3, #0
 8009746:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800974a:	4629      	mov	r1, r5
 800974c:	024b      	lsls	r3, r1, #9
 800974e:	4621      	mov	r1, r4
 8009750:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009754:	4621      	mov	r1, r4
 8009756:	024a      	lsls	r2, r1, #9
 8009758:	4610      	mov	r0, r2
 800975a:	4619      	mov	r1, r3
 800975c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800975e:	2200      	movs	r2, #0
 8009760:	62bb      	str	r3, [r7, #40]	; 0x28
 8009762:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009764:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009768:	f7fe fd36 	bl	80081d8 <__aeabi_uldivmod>
 800976c:	4602      	mov	r2, r0
 800976e:	460b      	mov	r3, r1
 8009770:	4613      	mov	r3, r2
 8009772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009774:	e058      	b.n	8009828 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009776:	4b38      	ldr	r3, [pc, #224]	; (8009858 <HAL_RCC_GetSysClockFreq+0x200>)
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	099b      	lsrs	r3, r3, #6
 800977c:	2200      	movs	r2, #0
 800977e:	4618      	mov	r0, r3
 8009780:	4611      	mov	r1, r2
 8009782:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009786:	623b      	str	r3, [r7, #32]
 8009788:	2300      	movs	r3, #0
 800978a:	627b      	str	r3, [r7, #36]	; 0x24
 800978c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009790:	4642      	mov	r2, r8
 8009792:	464b      	mov	r3, r9
 8009794:	f04f 0000 	mov.w	r0, #0
 8009798:	f04f 0100 	mov.w	r1, #0
 800979c:	0159      	lsls	r1, r3, #5
 800979e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80097a2:	0150      	lsls	r0, r2, #5
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	4641      	mov	r1, r8
 80097aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80097ae:	4649      	mov	r1, r9
 80097b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80097b4:	f04f 0200 	mov.w	r2, #0
 80097b8:	f04f 0300 	mov.w	r3, #0
 80097bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80097c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80097c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80097c8:	ebb2 040a 	subs.w	r4, r2, sl
 80097cc:	eb63 050b 	sbc.w	r5, r3, fp
 80097d0:	f04f 0200 	mov.w	r2, #0
 80097d4:	f04f 0300 	mov.w	r3, #0
 80097d8:	00eb      	lsls	r3, r5, #3
 80097da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80097de:	00e2      	lsls	r2, r4, #3
 80097e0:	4614      	mov	r4, r2
 80097e2:	461d      	mov	r5, r3
 80097e4:	4643      	mov	r3, r8
 80097e6:	18e3      	adds	r3, r4, r3
 80097e8:	603b      	str	r3, [r7, #0]
 80097ea:	464b      	mov	r3, r9
 80097ec:	eb45 0303 	adc.w	r3, r5, r3
 80097f0:	607b      	str	r3, [r7, #4]
 80097f2:	f04f 0200 	mov.w	r2, #0
 80097f6:	f04f 0300 	mov.w	r3, #0
 80097fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80097fe:	4629      	mov	r1, r5
 8009800:	028b      	lsls	r3, r1, #10
 8009802:	4621      	mov	r1, r4
 8009804:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009808:	4621      	mov	r1, r4
 800980a:	028a      	lsls	r2, r1, #10
 800980c:	4610      	mov	r0, r2
 800980e:	4619      	mov	r1, r3
 8009810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009812:	2200      	movs	r2, #0
 8009814:	61bb      	str	r3, [r7, #24]
 8009816:	61fa      	str	r2, [r7, #28]
 8009818:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800981c:	f7fe fcdc 	bl	80081d8 <__aeabi_uldivmod>
 8009820:	4602      	mov	r2, r0
 8009822:	460b      	mov	r3, r1
 8009824:	4613      	mov	r3, r2
 8009826:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009828:	4b0b      	ldr	r3, [pc, #44]	; (8009858 <HAL_RCC_GetSysClockFreq+0x200>)
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	0c1b      	lsrs	r3, r3, #16
 800982e:	f003 0303 	and.w	r3, r3, #3
 8009832:	3301      	adds	r3, #1
 8009834:	005b      	lsls	r3, r3, #1
 8009836:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009838:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800983a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800983c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009840:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009842:	e002      	b.n	800984a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009844:	4b05      	ldr	r3, [pc, #20]	; (800985c <HAL_RCC_GetSysClockFreq+0x204>)
 8009846:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009848:	bf00      	nop
    }
  }
  return sysclockfreq;
 800984a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800984c:	4618      	mov	r0, r3
 800984e:	3750      	adds	r7, #80	; 0x50
 8009850:	46bd      	mov	sp, r7
 8009852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009856:	bf00      	nop
 8009858:	40023800 	.word	0x40023800
 800985c:	00f42400 	.word	0x00f42400
 8009860:	007a1200 	.word	0x007a1200

08009864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009864:	b480      	push	{r7}
 8009866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009868:	4b03      	ldr	r3, [pc, #12]	; (8009878 <HAL_RCC_GetHCLKFreq+0x14>)
 800986a:	681b      	ldr	r3, [r3, #0]
}
 800986c:	4618      	mov	r0, r3
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	20000000 	.word	0x20000000

0800987c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009880:	f7ff fff0 	bl	8009864 <HAL_RCC_GetHCLKFreq>
 8009884:	4602      	mov	r2, r0
 8009886:	4b05      	ldr	r3, [pc, #20]	; (800989c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	0a9b      	lsrs	r3, r3, #10
 800988c:	f003 0307 	and.w	r3, r3, #7
 8009890:	4903      	ldr	r1, [pc, #12]	; (80098a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009892:	5ccb      	ldrb	r3, [r1, r3]
 8009894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009898:	4618      	mov	r0, r3
 800989a:	bd80      	pop	{r7, pc}
 800989c:	40023800 	.word	0x40023800
 80098a0:	08009ed0 	.word	0x08009ed0

080098a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80098a8:	f7ff ffdc 	bl	8009864 <HAL_RCC_GetHCLKFreq>
 80098ac:	4602      	mov	r2, r0
 80098ae:	4b05      	ldr	r3, [pc, #20]	; (80098c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	0b5b      	lsrs	r3, r3, #13
 80098b4:	f003 0307 	and.w	r3, r3, #7
 80098b8:	4903      	ldr	r1, [pc, #12]	; (80098c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80098ba:	5ccb      	ldrb	r3, [r1, r3]
 80098bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	40023800 	.word	0x40023800
 80098c8:	08009ed0 	.word	0x08009ed0

080098cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d101      	bne.n	80098de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e03f      	b.n	800995e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d106      	bne.n	80098f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7fe ff36 	bl	8008764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2224      	movs	r2, #36	; 0x24
 80098fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68da      	ldr	r2, [r3, #12]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800990e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 f829 	bl	8009968 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	691a      	ldr	r2, [r3, #16]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009924:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	695a      	ldr	r2, [r3, #20]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009934:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68da      	ldr	r2, [r3, #12]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009944:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2220      	movs	r2, #32
 8009950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2220      	movs	r2, #32
 8009958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
	...

08009968 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800996c:	b0c0      	sub	sp, #256	; 0x100
 800996e:	af00      	add	r7, sp, #0
 8009970:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009984:	68d9      	ldr	r1, [r3, #12]
 8009986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	ea40 0301 	orr.w	r3, r0, r1
 8009990:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009996:	689a      	ldr	r2, [r3, #8]
 8009998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	431a      	orrs	r2, r3
 80099a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099a4:	695b      	ldr	r3, [r3, #20]
 80099a6:	431a      	orrs	r2, r3
 80099a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099ac:	69db      	ldr	r3, [r3, #28]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80099b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80099c0:	f021 010c 	bic.w	r1, r1, #12
 80099c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80099ce:	430b      	orrs	r3, r1
 80099d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80099d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80099de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099e2:	6999      	ldr	r1, [r3, #24]
 80099e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	ea40 0301 	orr.w	r3, r0, r1
 80099ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80099f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	4b8f      	ldr	r3, [pc, #572]	; (8009c34 <UART_SetConfig+0x2cc>)
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d005      	beq.n	8009a08 <UART_SetConfig+0xa0>
 80099fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	4b8d      	ldr	r3, [pc, #564]	; (8009c38 <UART_SetConfig+0x2d0>)
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d104      	bne.n	8009a12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a08:	f7ff ff4c 	bl	80098a4 <HAL_RCC_GetPCLK2Freq>
 8009a0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009a10:	e003      	b.n	8009a1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a12:	f7ff ff33 	bl	800987c <HAL_RCC_GetPCLK1Freq>
 8009a16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a1e:	69db      	ldr	r3, [r3, #28]
 8009a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a24:	f040 810c 	bne.w	8009c40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009a36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009a3a:	4622      	mov	r2, r4
 8009a3c:	462b      	mov	r3, r5
 8009a3e:	1891      	adds	r1, r2, r2
 8009a40:	65b9      	str	r1, [r7, #88]	; 0x58
 8009a42:	415b      	adcs	r3, r3
 8009a44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009a4a:	4621      	mov	r1, r4
 8009a4c:	eb12 0801 	adds.w	r8, r2, r1
 8009a50:	4629      	mov	r1, r5
 8009a52:	eb43 0901 	adc.w	r9, r3, r1
 8009a56:	f04f 0200 	mov.w	r2, #0
 8009a5a:	f04f 0300 	mov.w	r3, #0
 8009a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009a6a:	4690      	mov	r8, r2
 8009a6c:	4699      	mov	r9, r3
 8009a6e:	4623      	mov	r3, r4
 8009a70:	eb18 0303 	adds.w	r3, r8, r3
 8009a74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a78:	462b      	mov	r3, r5
 8009a7a:	eb49 0303 	adc.w	r3, r9, r3
 8009a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009a8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009a92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009a96:	460b      	mov	r3, r1
 8009a98:	18db      	adds	r3, r3, r3
 8009a9a:	653b      	str	r3, [r7, #80]	; 0x50
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	eb42 0303 	adc.w	r3, r2, r3
 8009aa2:	657b      	str	r3, [r7, #84]	; 0x54
 8009aa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009aa8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009aac:	f7fe fb94 	bl	80081d8 <__aeabi_uldivmod>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	4b61      	ldr	r3, [pc, #388]	; (8009c3c <UART_SetConfig+0x2d4>)
 8009ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8009aba:	095b      	lsrs	r3, r3, #5
 8009abc:	011c      	lsls	r4, r3, #4
 8009abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ac8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009acc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009ad0:	4642      	mov	r2, r8
 8009ad2:	464b      	mov	r3, r9
 8009ad4:	1891      	adds	r1, r2, r2
 8009ad6:	64b9      	str	r1, [r7, #72]	; 0x48
 8009ad8:	415b      	adcs	r3, r3
 8009ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009adc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009ae0:	4641      	mov	r1, r8
 8009ae2:	eb12 0a01 	adds.w	sl, r2, r1
 8009ae6:	4649      	mov	r1, r9
 8009ae8:	eb43 0b01 	adc.w	fp, r3, r1
 8009aec:	f04f 0200 	mov.w	r2, #0
 8009af0:	f04f 0300 	mov.w	r3, #0
 8009af4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009af8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009afc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b00:	4692      	mov	sl, r2
 8009b02:	469b      	mov	fp, r3
 8009b04:	4643      	mov	r3, r8
 8009b06:	eb1a 0303 	adds.w	r3, sl, r3
 8009b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b0e:	464b      	mov	r3, r9
 8009b10:	eb4b 0303 	adc.w	r3, fp, r3
 8009b14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009b28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	18db      	adds	r3, r3, r3
 8009b30:	643b      	str	r3, [r7, #64]	; 0x40
 8009b32:	4613      	mov	r3, r2
 8009b34:	eb42 0303 	adc.w	r3, r2, r3
 8009b38:	647b      	str	r3, [r7, #68]	; 0x44
 8009b3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009b3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009b42:	f7fe fb49 	bl	80081d8 <__aeabi_uldivmod>
 8009b46:	4602      	mov	r2, r0
 8009b48:	460b      	mov	r3, r1
 8009b4a:	4611      	mov	r1, r2
 8009b4c:	4b3b      	ldr	r3, [pc, #236]	; (8009c3c <UART_SetConfig+0x2d4>)
 8009b4e:	fba3 2301 	umull	r2, r3, r3, r1
 8009b52:	095b      	lsrs	r3, r3, #5
 8009b54:	2264      	movs	r2, #100	; 0x64
 8009b56:	fb02 f303 	mul.w	r3, r2, r3
 8009b5a:	1acb      	subs	r3, r1, r3
 8009b5c:	00db      	lsls	r3, r3, #3
 8009b5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009b62:	4b36      	ldr	r3, [pc, #216]	; (8009c3c <UART_SetConfig+0x2d4>)
 8009b64:	fba3 2302 	umull	r2, r3, r3, r2
 8009b68:	095b      	lsrs	r3, r3, #5
 8009b6a:	005b      	lsls	r3, r3, #1
 8009b6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009b70:	441c      	add	r4, r3
 8009b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b76:	2200      	movs	r2, #0
 8009b78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009b7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009b80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009b84:	4642      	mov	r2, r8
 8009b86:	464b      	mov	r3, r9
 8009b88:	1891      	adds	r1, r2, r2
 8009b8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8009b8c:	415b      	adcs	r3, r3
 8009b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009b94:	4641      	mov	r1, r8
 8009b96:	1851      	adds	r1, r2, r1
 8009b98:	6339      	str	r1, [r7, #48]	; 0x30
 8009b9a:	4649      	mov	r1, r9
 8009b9c:	414b      	adcs	r3, r1
 8009b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8009ba0:	f04f 0200 	mov.w	r2, #0
 8009ba4:	f04f 0300 	mov.w	r3, #0
 8009ba8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009bac:	4659      	mov	r1, fp
 8009bae:	00cb      	lsls	r3, r1, #3
 8009bb0:	4651      	mov	r1, sl
 8009bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bb6:	4651      	mov	r1, sl
 8009bb8:	00ca      	lsls	r2, r1, #3
 8009bba:	4610      	mov	r0, r2
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	4642      	mov	r2, r8
 8009bc2:	189b      	adds	r3, r3, r2
 8009bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009bc8:	464b      	mov	r3, r9
 8009bca:	460a      	mov	r2, r1
 8009bcc:	eb42 0303 	adc.w	r3, r2, r3
 8009bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009be0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009be4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009be8:	460b      	mov	r3, r1
 8009bea:	18db      	adds	r3, r3, r3
 8009bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bee:	4613      	mov	r3, r2
 8009bf0:	eb42 0303 	adc.w	r3, r2, r3
 8009bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009bfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009bfe:	f7fe faeb 	bl	80081d8 <__aeabi_uldivmod>
 8009c02:	4602      	mov	r2, r0
 8009c04:	460b      	mov	r3, r1
 8009c06:	4b0d      	ldr	r3, [pc, #52]	; (8009c3c <UART_SetConfig+0x2d4>)
 8009c08:	fba3 1302 	umull	r1, r3, r3, r2
 8009c0c:	095b      	lsrs	r3, r3, #5
 8009c0e:	2164      	movs	r1, #100	; 0x64
 8009c10:	fb01 f303 	mul.w	r3, r1, r3
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	00db      	lsls	r3, r3, #3
 8009c18:	3332      	adds	r3, #50	; 0x32
 8009c1a:	4a08      	ldr	r2, [pc, #32]	; (8009c3c <UART_SetConfig+0x2d4>)
 8009c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c20:	095b      	lsrs	r3, r3, #5
 8009c22:	f003 0207 	and.w	r2, r3, #7
 8009c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4422      	add	r2, r4
 8009c2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009c30:	e105      	b.n	8009e3e <UART_SetConfig+0x4d6>
 8009c32:	bf00      	nop
 8009c34:	40011000 	.word	0x40011000
 8009c38:	40011400 	.word	0x40011400
 8009c3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c44:	2200      	movs	r2, #0
 8009c46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009c4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009c4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009c52:	4642      	mov	r2, r8
 8009c54:	464b      	mov	r3, r9
 8009c56:	1891      	adds	r1, r2, r2
 8009c58:	6239      	str	r1, [r7, #32]
 8009c5a:	415b      	adcs	r3, r3
 8009c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009c62:	4641      	mov	r1, r8
 8009c64:	1854      	adds	r4, r2, r1
 8009c66:	4649      	mov	r1, r9
 8009c68:	eb43 0501 	adc.w	r5, r3, r1
 8009c6c:	f04f 0200 	mov.w	r2, #0
 8009c70:	f04f 0300 	mov.w	r3, #0
 8009c74:	00eb      	lsls	r3, r5, #3
 8009c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009c7a:	00e2      	lsls	r2, r4, #3
 8009c7c:	4614      	mov	r4, r2
 8009c7e:	461d      	mov	r5, r3
 8009c80:	4643      	mov	r3, r8
 8009c82:	18e3      	adds	r3, r4, r3
 8009c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009c88:	464b      	mov	r3, r9
 8009c8a:	eb45 0303 	adc.w	r3, r5, r3
 8009c8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009ca2:	f04f 0200 	mov.w	r2, #0
 8009ca6:	f04f 0300 	mov.w	r3, #0
 8009caa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009cae:	4629      	mov	r1, r5
 8009cb0:	008b      	lsls	r3, r1, #2
 8009cb2:	4621      	mov	r1, r4
 8009cb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cb8:	4621      	mov	r1, r4
 8009cba:	008a      	lsls	r2, r1, #2
 8009cbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009cc0:	f7fe fa8a 	bl	80081d8 <__aeabi_uldivmod>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4b60      	ldr	r3, [pc, #384]	; (8009e4c <UART_SetConfig+0x4e4>)
 8009cca:	fba3 2302 	umull	r2, r3, r3, r2
 8009cce:	095b      	lsrs	r3, r3, #5
 8009cd0:	011c      	lsls	r4, r3, #4
 8009cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009cdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009ce0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009ce4:	4642      	mov	r2, r8
 8009ce6:	464b      	mov	r3, r9
 8009ce8:	1891      	adds	r1, r2, r2
 8009cea:	61b9      	str	r1, [r7, #24]
 8009cec:	415b      	adcs	r3, r3
 8009cee:	61fb      	str	r3, [r7, #28]
 8009cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009cf4:	4641      	mov	r1, r8
 8009cf6:	1851      	adds	r1, r2, r1
 8009cf8:	6139      	str	r1, [r7, #16]
 8009cfa:	4649      	mov	r1, r9
 8009cfc:	414b      	adcs	r3, r1
 8009cfe:	617b      	str	r3, [r7, #20]
 8009d00:	f04f 0200 	mov.w	r2, #0
 8009d04:	f04f 0300 	mov.w	r3, #0
 8009d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009d0c:	4659      	mov	r1, fp
 8009d0e:	00cb      	lsls	r3, r1, #3
 8009d10:	4651      	mov	r1, sl
 8009d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d16:	4651      	mov	r1, sl
 8009d18:	00ca      	lsls	r2, r1, #3
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	4603      	mov	r3, r0
 8009d20:	4642      	mov	r2, r8
 8009d22:	189b      	adds	r3, r3, r2
 8009d24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d28:	464b      	mov	r3, r9
 8009d2a:	460a      	mov	r2, r1
 8009d2c:	eb42 0303 	adc.w	r3, r2, r3
 8009d30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009d3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009d40:	f04f 0200 	mov.w	r2, #0
 8009d44:	f04f 0300 	mov.w	r3, #0
 8009d48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009d4c:	4649      	mov	r1, r9
 8009d4e:	008b      	lsls	r3, r1, #2
 8009d50:	4641      	mov	r1, r8
 8009d52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d56:	4641      	mov	r1, r8
 8009d58:	008a      	lsls	r2, r1, #2
 8009d5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009d5e:	f7fe fa3b 	bl	80081d8 <__aeabi_uldivmod>
 8009d62:	4602      	mov	r2, r0
 8009d64:	460b      	mov	r3, r1
 8009d66:	4b39      	ldr	r3, [pc, #228]	; (8009e4c <UART_SetConfig+0x4e4>)
 8009d68:	fba3 1302 	umull	r1, r3, r3, r2
 8009d6c:	095b      	lsrs	r3, r3, #5
 8009d6e:	2164      	movs	r1, #100	; 0x64
 8009d70:	fb01 f303 	mul.w	r3, r1, r3
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	011b      	lsls	r3, r3, #4
 8009d78:	3332      	adds	r3, #50	; 0x32
 8009d7a:	4a34      	ldr	r2, [pc, #208]	; (8009e4c <UART_SetConfig+0x4e4>)
 8009d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d80:	095b      	lsrs	r3, r3, #5
 8009d82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d86:	441c      	add	r4, r3
 8009d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	673b      	str	r3, [r7, #112]	; 0x70
 8009d90:	677a      	str	r2, [r7, #116]	; 0x74
 8009d92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009d96:	4642      	mov	r2, r8
 8009d98:	464b      	mov	r3, r9
 8009d9a:	1891      	adds	r1, r2, r2
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	415b      	adcs	r3, r3
 8009da0:	60fb      	str	r3, [r7, #12]
 8009da2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009da6:	4641      	mov	r1, r8
 8009da8:	1851      	adds	r1, r2, r1
 8009daa:	6039      	str	r1, [r7, #0]
 8009dac:	4649      	mov	r1, r9
 8009dae:	414b      	adcs	r3, r1
 8009db0:	607b      	str	r3, [r7, #4]
 8009db2:	f04f 0200 	mov.w	r2, #0
 8009db6:	f04f 0300 	mov.w	r3, #0
 8009dba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009dbe:	4659      	mov	r1, fp
 8009dc0:	00cb      	lsls	r3, r1, #3
 8009dc2:	4651      	mov	r1, sl
 8009dc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009dc8:	4651      	mov	r1, sl
 8009dca:	00ca      	lsls	r2, r1, #3
 8009dcc:	4610      	mov	r0, r2
 8009dce:	4619      	mov	r1, r3
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	4642      	mov	r2, r8
 8009dd4:	189b      	adds	r3, r3, r2
 8009dd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009dd8:	464b      	mov	r3, r9
 8009dda:	460a      	mov	r2, r1
 8009ddc:	eb42 0303 	adc.w	r3, r2, r3
 8009de0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	663b      	str	r3, [r7, #96]	; 0x60
 8009dec:	667a      	str	r2, [r7, #100]	; 0x64
 8009dee:	f04f 0200 	mov.w	r2, #0
 8009df2:	f04f 0300 	mov.w	r3, #0
 8009df6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009dfa:	4649      	mov	r1, r9
 8009dfc:	008b      	lsls	r3, r1, #2
 8009dfe:	4641      	mov	r1, r8
 8009e00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e04:	4641      	mov	r1, r8
 8009e06:	008a      	lsls	r2, r1, #2
 8009e08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009e0c:	f7fe f9e4 	bl	80081d8 <__aeabi_uldivmod>
 8009e10:	4602      	mov	r2, r0
 8009e12:	460b      	mov	r3, r1
 8009e14:	4b0d      	ldr	r3, [pc, #52]	; (8009e4c <UART_SetConfig+0x4e4>)
 8009e16:	fba3 1302 	umull	r1, r3, r3, r2
 8009e1a:	095b      	lsrs	r3, r3, #5
 8009e1c:	2164      	movs	r1, #100	; 0x64
 8009e1e:	fb01 f303 	mul.w	r3, r1, r3
 8009e22:	1ad3      	subs	r3, r2, r3
 8009e24:	011b      	lsls	r3, r3, #4
 8009e26:	3332      	adds	r3, #50	; 0x32
 8009e28:	4a08      	ldr	r2, [pc, #32]	; (8009e4c <UART_SetConfig+0x4e4>)
 8009e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e2e:	095b      	lsrs	r3, r3, #5
 8009e30:	f003 020f 	and.w	r2, r3, #15
 8009e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4422      	add	r2, r4
 8009e3c:	609a      	str	r2, [r3, #8]
}
 8009e3e:	bf00      	nop
 8009e40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009e44:	46bd      	mov	sp, r7
 8009e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e4a:	bf00      	nop
 8009e4c:	51eb851f 	.word	0x51eb851f

08009e50 <__libc_init_array>:
 8009e50:	b570      	push	{r4, r5, r6, lr}
 8009e52:	4d0d      	ldr	r5, [pc, #52]	; (8009e88 <__libc_init_array+0x38>)
 8009e54:	4c0d      	ldr	r4, [pc, #52]	; (8009e8c <__libc_init_array+0x3c>)
 8009e56:	1b64      	subs	r4, r4, r5
 8009e58:	10a4      	asrs	r4, r4, #2
 8009e5a:	2600      	movs	r6, #0
 8009e5c:	42a6      	cmp	r6, r4
 8009e5e:	d109      	bne.n	8009e74 <__libc_init_array+0x24>
 8009e60:	4d0b      	ldr	r5, [pc, #44]	; (8009e90 <__libc_init_array+0x40>)
 8009e62:	4c0c      	ldr	r4, [pc, #48]	; (8009e94 <__libc_init_array+0x44>)
 8009e64:	f000 f820 	bl	8009ea8 <_init>
 8009e68:	1b64      	subs	r4, r4, r5
 8009e6a:	10a4      	asrs	r4, r4, #2
 8009e6c:	2600      	movs	r6, #0
 8009e6e:	42a6      	cmp	r6, r4
 8009e70:	d105      	bne.n	8009e7e <__libc_init_array+0x2e>
 8009e72:	bd70      	pop	{r4, r5, r6, pc}
 8009e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e78:	4798      	blx	r3
 8009e7a:	3601      	adds	r6, #1
 8009e7c:	e7ee      	b.n	8009e5c <__libc_init_array+0xc>
 8009e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e82:	4798      	blx	r3
 8009e84:	3601      	adds	r6, #1
 8009e86:	e7f2      	b.n	8009e6e <__libc_init_array+0x1e>
 8009e88:	08009ee0 	.word	0x08009ee0
 8009e8c:	08009ee0 	.word	0x08009ee0
 8009e90:	08009ee0 	.word	0x08009ee0
 8009e94:	08009ee4 	.word	0x08009ee4

08009e98 <memset>:
 8009e98:	4402      	add	r2, r0
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d100      	bne.n	8009ea2 <memset+0xa>
 8009ea0:	4770      	bx	lr
 8009ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ea6:	e7f9      	b.n	8009e9c <memset+0x4>

08009ea8 <_init>:
 8009ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eaa:	bf00      	nop
 8009eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eae:	bc08      	pop	{r3}
 8009eb0:	469e      	mov	lr, r3
 8009eb2:	4770      	bx	lr

08009eb4 <_fini>:
 8009eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb6:	bf00      	nop
 8009eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eba:	bc08      	pop	{r3}
 8009ebc:	469e      	mov	lr, r3
 8009ebe:	4770      	bx	lr
